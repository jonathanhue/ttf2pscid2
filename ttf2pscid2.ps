%!PS-Adobe-3.0

% TTF to CID-keyed font converter by Raymond Luckhurst, Scriptit Ltd, https://scriptit.uk
%
% Converts TTF to a Type 2 CIDFont with 2-byte Unicode CMap encoding, for embedding into PostScript.
%
% See https://github.com/scriptituk/ttf2pscid2/blob/master/README.md for Documentation.
%
% Based on Apple's TrueType Reference Manual
% see https://developer.apple.com/fonts/TrueType-Reference-Manual
% and https://www.microsoft.com/typography/otspec/otff.htm
%
% Conventions:
% r_ reader procs
% w_ writer procs
% d_ directory entry
% t_ table data
% $ variables

% std I/O
/$stdout (%stdout) (w) file def
/$stderr (%stderr) (w) file def

% temp
/cat { exch dup length 2 index length add string dup dup 5 2 roll copy length exch putinterval } def
/error { $stderr exch (ERROR ) exch cat (\n) cat writestring $stderr flushfile quit } def

% options
% NOTE (gs v9): octal-escape double quotes in all command-line string params, i.e. '"' --> '\042'
/psname dup where { pop pop }{ false def } ifelse
/optimise dup where { pop pop }{ false def } ifelse
/subset dup where { pop pop }{ () def } ifelse
/ucs2 dup where { pop pop }{ false def } ifelse
/binary dup where { pop pop }{ false def } ifelse
/compress dup where { pop pop }{ false def } ifelse
/comments dup where { pop pop }{ false def } ifelse
/info dup where { pop pop }{ false def } ifelse
/inc dup where { pop pop }{ () def } ifelse

/json () def
mark /.shellarguments where { pop .shellarguments }{ shellarguments } ifelse pop
counttomark 1 ge { % JSON string follows
	token {
		dup type /stringtype eq {
			/json exch def
		} if
	} if
} if cleartomark

json ("inc":") search { % has inc
	pop pop (") search pop exch pop exch pop % extract inc
	{ (\\/) search { exch pop (/) cat exch cat }{ exit } ifelse } loop % \/ to /
	/inc exch def
}{ pop } ifelse
inc () ne {
	inc dup length 1 sub 1 getinterval (/) ne { /inc inc (/) cat def } if % dir/
} if

% dependencies
/include { inc exch cat dup status { pop pop pop pop run }{ (inc? need ) exch cat error } ifelse } bind def
(string.ps) include
(file.ps) include
(sort.ps) include
(math.ps) include
json jsondecode dup type /dicttype eq { { def } forall }{ pop } ifelse % JSON args
compress { /binary true def } if
subset () ne { /optimise true def } if

% messaging
/notice { $stdout dup dup 4 -1 roll writestring (\n) writestring flushfile } bind def
/warning { [ exch (WARNING ) exch (\n) ] concata $stderr exch writestring $stderr flushfile } bind def
/error { [ exch (ERROR ) exch (\n) ] concata $stderr exch writestring $stderr flushfile stop } bind def

% constants
/MAX_CID 65534 def
/MAX_STRING_SIZE 65535 def
/MAX_ARRAY_SIZE 65535 def
/MAX_DICT_SIZE 65535 def
/ARG_1_AND_2_ARE_WORDS 1 0 bitshift def
/ARGS_ARE_XY_VALUES 1 1 bitshift def
/ROUND_XY_TO_GRID 1 2 bitshift def
/WE_HAVE_A_SCALE 1 3 bitshift def
/MORE_COMPONENTS 1 5 bitshift def
/WE_HAVE_AN_X_AND_Y_SCALE 1 6 bitshift def
/WE_HAVE_A_TWO_BY_TWO 1 7 bitshift def
/WE_HAVE_INSTRUCTIONS 1 8 bitshift def
/USE_MY_METRICS 1 9 bitshift def
/OVERLAP_COMPOUND 1 10 bitshift def
/TABLES [ % tag, required/optional in TTF, emit to Type42
	[/head true true]
	[/hhea true true]
	[/hmtx true true]
	[/loca true true]
	[/glyf true true]
	[/cmap true false]
	[/name true false]
	[/maxp true true]
	[/post true false]
	[/cvt_ false true]
	[/fpgm false true]
	[/prep false true]
%	[/cff_ false false]
%	[/os_2 false false]
] readonly def
/TAG_NAMES << % TTF tag name conversions to simplify postscript code
	(cvt ) (cvt_)
	/cvt_ (cvt )
	(CFF ) (cff_)
	/cff_ (CFF )
	(OS/2) (os_2)
	/os_2 (OS/2)
	//TABLES { 0 get dup dup length string cvs } forall % last
>> readonly def
/UNDERLINE_THICKNESS_CIDS [ (_-.|!liI1) {} forall 16#2013 16#2014 ] readonly def % thinnest cids for ul

% primatives readers
/r_uint8 { $r read pop } bind def
/r_uint16 { r_uint8 8 bitshift r_uint8 or } bind def
/r_int16 { r_uint16 dup 16#8000 and 0 ne { 16#7FFF not or } if } bind def
/r_uint32 { r_uint16 16 bitshift r_uint16 or } bind def
/r_int32 { r_uint32 dup 16#80000000 and 0 ne { 16#7FFFFFFF not or } if } bind def
/r_Fixed { r_int32 65536 div } bind def
/r_uFWord { r_uint16 } bind def
/r_FWord { r_int16 } bind def
/r_longDateTime { 8 r_string } bind def
/r_bytes { [ exch { r_uint8 } repeat ] } bind def
/r_words { [ exch { r_uint16 } repeat ] } bind def
/r_longs { [ exch { r_uint32 } repeat ] } bind def
/r_string { dup 0 gt { $r exch string readstring pop }{ pop () } ifelse } bind def
/r_skip { $r fileposition add $r exch setfileposition } bind def
/r_peek8 { r_uint8 -1 r_skip } bind def
/r_peek16 { r_uint16 -2 r_skip } bind def
/r_peek32 { r_uint32 -4 r_skip } bind def

% primatives writers
/w_uint8 { $w exch write } bind def
/w_uint16 { dup -8 bitshift w_uint8 w_uint8 } bind def
/w_int16 { w_uint16 } bind def
/w_uint32 { dup -16 bitshift w_uint16 w_uint16 } bind def
/w_int32 { w_uint32 } bind def
/w_Fixed { 65536 mul cvi w_uint32 } bind def
/w_uFWord { w_uint16 } bind def
/w_FWord { w_int16 } bind def
/w_longDateTime { dup length dup 8 ne { 8 min 0 exch getinterval 8 string exch 1 index copy } if pop w_string } bind def
/w_bytes { { w_uint8 } forall } bind def
/w_words { { w_uint16 } forall } bind def
/w_string { $w exch writestring } bind def
/w_zero { { 0 w_uint8 } repeat } bind def
/w_poke16 { 2 getinterval /NullEncode filter /$w exch def w_uint16 $w closefile } bind def % value string position
/w_poke32 { 4 getinterval /NullEncode filter /$w exch def w_uint32 $w closefile } bind def % value string position

% stream writer system

/sinit {
	userdict /UserObjects known not { 0 null defineuserobject } if % init UOs
	1 execuserobject type /booleantype eq dup not {
		0 //MAX_STRING_SIZE string defineuserobject % data target
	} if
} bind def

/sfile {
	sstatus {
		(sfile: cannot nest ) warning
	} if
	1 true defineuserobject % status, false if closed
	2 0 defineuserobject % insertion position and data length
	3 null defineuserobject % data copy
	{ % filter proc
		1 exch defineuserobject % status
		2 exch length 2 execuserobject add defineuserobject % new length
		0 execuserobject 2 execuserobject 1 index length 1 index sub getinterval % remaining space
		dup length 0 eq {
			(sfile: out of buffer space) error
		} if
	} /NullEncode filter
} bind def

/sstatus {
	sinit { 1 execuserobject }{ false } ifelse
} bind def

/sreset {
	sinit { 2 0 defineuserobject } if
} bind def

/slength {
	sinit { 2 execuserobject }{ 0 } ifelse
} bind def

/sdata {
	sinit { 0 execuserobject 0 2 execuserobject getinterval }{ 0 string } ifelse
} bind def

/scopy {
	sinit {
		3 execuserobject null eq { 3 sdata dup length string copy defineuserobject } if % cache
		3 execuserobject
	}{
		0 string
	} ifelse
} bind def

% on-demand TTF table reader/decoder
/r_decode {
	$r fileposition exch % save position
	dup
	dup
	dup 0 (d) putinterval load % directory entry
	$r 1 index /offset get setfileposition % set position
	1 index 0 (r) putinterval
	exch cvx exec % read table
	1 index 0 (t) putinterval
	exch 1 index def % redefine t_* as the read data
	exch $r exch setfileposition % restore position
} bind def

% on-demand TTF table writer/encoder
/w_encode {
	dup
	dup
	cvx exec % load table
	exch dup 0 (w) putinterval
	/$w sfile def
	cvx exec % write table
	$w closefile
	dup 0 (d) putinterval load % directory entry
	dup /data known not { % not array data (glyf hmtx loca)
		/data scopy put
	}{
		pop
	} ifelse
} bind def

% TTF directory and table readers/writers

/r_directory {
	% parse offset subtable
	6 dict dup begin
		/type r_uint32 def % 16#00010000 for TTF, 16#4F54544F for OTF
		/numTables r_uint16 def
		/searchRange r_uint16 def
		/entrySelector r_uint16 def
		/rangeShift r_uint16 def
		% parse table directory
		/directory [
			numTables {
				<<
					/tag 4 r_string
					/checkSum r_uint32
					/offset r_uint32
					/Length r_uint32
				>>
			} repeat
		] def
	end
	/t_directory 1 index def
	% define directory dictionaries
	/directory get {
		dup /tag get
		//TAG_NAMES 1 index known {
			//TAG_NAMES exch get % ps name
			(d_) 1 index concat2 3 -1 roll def % directory entry
			(t_) exch concat2 [ 1 index /r_decode cvx ] cvx def % reader fn
		}{
			pop pop
		} ifelse
	} forall
	% check required TTF tables are present
	[ //TABLES {
		aload pop
		(d_) 3 index concat2
		currentdict exch known not {
			pop exch
			//TAG_NAMES exch get % ttf name
			(: table missing) concat2 exch { error }{ pop } ifelse % or pop/warning
		}{
			exch pop not { pop } if
			dup length string cvs
		} ifelse
	} forall ]
	{} insertionsort
	/$tables exch def % Type42 tables to emit
} bind def

/w_directory {
	% get table data
	$tables {
		(t_) exch concat2
		exec w_encode
	} forall
	% update directory entries
	/$offset 12 $tables length 16 mul add def % running offset
	/$checksum 0 def % file checksum
	$tables {
		(d_) exch concat2 load begin
			data type /arraytype eq {
				0 0 % length checksum
				data {
					dup null ne {
						dup checksum exch length
						4 -1 roll add 3 1 roll iadd32
					}{
						pop
					} ifelse
				} forall
				/checkSum exch def % for padded data
				/Length 1 index def % data length padded
			}{
				/Length data length def % unpadded
				/data data zeropad def % pad
				/checkSum data checksum def % for padded data
				data length % padded
			} ifelse
			/offset $offset def
			/$offset $offset 3 -1 roll add store
			/$checksum $checksum checkSum iadd32 store
		end
	} forall
	% make offset subtable
	5 dict
	dup /numTables $tables length put
	dup searchargs
	/$w sfile def
	dup begin
		16#00010000 w_uint32
		numTables w_uint16
		searchRange w_uint16
		entrySelector w_uint16
		rangeShift w_uint16
	end
	$tables {
		(d_) exch concat2 load begin
			tag w_string
			checkSum w_uint32
			offset w_uint32
			Length w_uint32
		end
	} forall
	$w closefile
	dup /data scopy put
	% do checkSumAdjustment
	/$checksum 1 index /data get checksum $checksum iadd32 def
	16#B1B0AFBA $checksum isub32
	d_head /data get 8 w_poke32
	currentdict /$offset undef
	currentdict /$checksum undef
} bind def

/r_cff_ {
	begin
		Length //MAX_STRING_SIZE div ceiling cvi array
		Length
		0 1 3 index length 1 sub {
			1 index //MAX_STRING_SIZE min r_string
			dup length 3 1 roll
			4 index 3 1 roll put
			sub
		} for
		pop
		userdict begin
			/cff exch def % raw CFF data chunks
%			(cff.ps) include % CFF parsing
		end
false { % not the CFF solution - install as Type 2 (CFF) base font and add CID layer
		$r offset setfileposition
		<<
			% Header
			/major r_CFF_Card8
			/minor r_CFF_Card8
			/hdrSize r_CFF_Card8
			/offSize r_CFF_OffSize
			/Name r_CFF_INDEX
			/TopDICT r_CFF_INDEX
			/String r_CFF_INDEX
			/GlobalSubr r_CFF_INDEX
		>> begin
			% parse TopDICT recursively
			TopDICT /data get
			0 1 2 index length 1 sub {
				2 copy 2 copy get r_CFF_DICT
				dup CFF_ESCAPE 6 or known {
					dup CFF_ESCAPE 6 or get
				}{
					CFF_TOP_DICT_DEFAULTS /CharstringType get
				} ifelse
				/$CharstringType exch def
				r_CFF_DICT_sanitise
				CFF_TOP_DICT_DEFAULTS r_CFF_DICT_defaults
				put pop
			} for
			pop
			currentdict
		end
} if
	end
	cff
} bind def

/r_cmap { % just store the encoding table header and create procs for specific subtable formats
% useful: ttcmap.c from The FreeType Project, https://www.freetype.org/
	<<
		/version r_uint16
		/numberSubtables r_uint16
		/encodingSubtables [
			2 index {
				<<
					/platformID r_uint16
					/platformSpecificID r_uint16
					/offset r_uint32
					/format null % peeked
				>>
			} repeat
		]
	>>
	exch /offset get
	1 index /encodingSubtables get {
		dup /offset get 2 index add
		$r exch setfileposition
		r_peek16 % format
		dup 8 ge 1 index 13 le and { cvr } if % 32-bit fixed-point format
		/format exch put
	} forall
	pop
} bind def

/r_cmap_0 {
	begin
		/format r_uint16 def
		/Length r_uint16 def
		/language r_uint16 def
		/glyphIndexArray 256 r_bytes def
		currentdict
	end
	exch pop
} bind def

/r_cmap_2 {
	begin
		/format r_uint16 def
		/Length r_uint16 def
		/language r_uint16 def
		/subHeaderKeys 256 r_words def
		0 subHeaderKeys { 8 idiv max } forall % max subheaders
		dup 1 add array % subheaders
		exch 0 1 2 index
		{
			<<
				/firstCode r_uint16
				/entryCount r_uint16
				/idDelta r_int16
				/idRangeOffset r_uint16 % from here
			>>
			dup /idRangeOffset get 2 sub % offset to range
			3 index 3 index sub 8 mul % offset to glyphIndexArray
			sub 2 idiv % index into glyphIndexArray for firstCode
			1 index exch /firstCodeIndex exch put
			3 index 3 1 roll put
		} for
		pop
		/subHeaders exch def
		Length add $r fileposition sub 2 idiv r_words % # GIDs
		/glyphIndexArray exch def
		currentdict
	end
} bind def

/r_cmap_4 {
	begin
		/format r_uint16 def
		/Length r_uint16 def
		/language r_uint16 def
		/segCount r_uint16 2 idiv def
		/searchRange r_uint16 def
		/entrySelector r_uint16 def
		/rangeShift r_uint16 def
		/endCode segCount r_words def
		2 r_skip
		/startCode segCount r_words def
		/idDelta segCount r_words def
		/idRangeOffset segCount r_words def
		Length add $r fileposition sub 2 idiv r_words % # GIDs
		/glyphIndexArray exch def
		currentdict
	end
} bind def

/r_cmap_6 {
	begin
		/format r_uint16 def
		/Length r_uint16 def
		/language r_uint16 def
		/firstCode r_uint16 def
		/entryCount r_uint16 def
		/glyphIndexArray entryCount r_words def
		currentdict
	end
	exch pop
} bind def

/r_cmap_8.0 {
	(cmap: format 8.0 not supported) warning
	dup /format r_Fixed put
	exch pop
} bind def

/r_cmap_10.0 {
	(cmap: format 10.0 not supported) warning
	dup /format r_Fixed put
	exch pop
} bind def

/r_cmap_12.0 {
	begin
		/format r_Fixed def
		/Length r_uint32 def
		/language r_uint32 def
		/nGroups r_uint32 def
		nGroups [ exch {
			<<
				/startCharCode r_uint32
				/endCharCode r_uint32
				/startGlyphCode r_uint32
			>>
		} repeat ]
		/groups exch def
		currentdict
	end
	exch pop
} bind def

/r_cmap_13.0 {
	(cmap: format 13.0 not supported) warning
	dup /format r_Fixed put
	exch pop
} bind def

/r_cmap_14 {
	(cmap: format 14 not supported) warning
	dup /format r_uint16 put
	exch pop
} bind def

/r_cvt_ {
	/Length get r_string % controlValues
} bind def

/w_cvt_ {
	w_string
} bind def

/r_fpgm {
	/Length get r_string % instructions
} bind def

/w_fpgm {
	w_string
} bind def

/r_glyf { % just store the unpacked binary and info to re-index component glyphs
	/offset get
	t_loca
	dup length 1 sub % # glyphs
	dup array
	4 1 roll
	0 1 3 -1 roll 1 sub
	{
		2 copy 1 add get % next glyph position
		2 index 2 index get % start
		2 copy gt { % not empty
			dup 5 index add % offset
			$r 1 index setfileposition
			3 1 roll sub r_string % description
			$r 2 index setfileposition % back
			<<
				/description 3 -1 roll
				/numberOfContours r_int16
				/xMin r_FWord
				/yMin r_FWord
				/xMax r_FWord
				/yMax r_FWord
			>>
			dup /numberOfContours get 0 lt {
				[ {
					<<
						/flags r_uint16 % for testing
						/offset $r fileposition % for poking in new GID
						/glyphIndex r_uint16 % may need remapping
					>>
					dup /flags get
					dup //ARG_1_AND_2_ARE_WORDS and 0 ne { 4 }{ 2 } ifelse exch
					dup //WE_HAVE_A_SCALE and 0 ne {
						exch 2 add exch
					}{
						dup //WE_HAVE_AN_X_AND_Y_SCALE and 0 ne {
							exch 4 add exch
						}{
							dup //WE_HAVE_A_TWO_BY_TWO and 0 ne {
								exch 8 add exch
							} if
						} ifelse
					} ifelse
					exch r_skip
					//MORE_COMPONENTS and 0 eq { exit } if
				} loop ]
				dup dup length 1 sub get /flags get //WE_HAVE_INSTRUCTIONS and 0 ne {
					r_uint16 % # instructions
					r_skip
				} if
				dup { /offset 2 copy get 5 index sub put } forall % GID offsets from description
				1 index /components 3 -1 roll put
			} if
			exch pop
			4 index 3 1 roll put
		}{
			pop pop pop % empty
		} ifelse
	} for
	pop pop
} bind def

/w_glyf {
	dup length array % padded descriptions
	dup length 1 add array % new loca
	3 -1 roll 0 % offset
	exch 0 1 2 index length 1 sub
	{
		2 copy get
		dup null ne {
			/description get zeropad
			dup length exch
			6 index exch 3 index exch put
		}{
			pop 0
		} ifelse
		exch
		4 index exch 4 index put
		3 -1 roll add exch
	} for
	length exch 2 index 3 1 roll put % last loca
	/t_loca exch def
	d_glyf exch /data exch put
} bind def

/r_head {
	pop
	<<
		/version r_Fixed
		/fontRevision r_Fixed
		/checkSumAdjustment r_uint32
		/magicNumber r_uint32
		/flags r_uint16
		/unitsPerEm r_uint16
		/created r_longDateTime
		/modified r_longDateTime
		/xMin r_FWord
		/yMin r_FWord
		/xMax r_FWord
		/yMax r_FWord
		/macStyle r_uint16
		/lowestRecPPEM r_uint16
		/fontDirectionHint r_int16
		/indexToLocFormat r_int16
		/glyphDataFormat r_int16
	>>
} bind def

/w_head {
	begin
		/indexToLocFormat t_loca dup length 1 sub get 16#20000 idiv 1 min def % possibly changed
		version w_Fixed
		fontRevision w_Fixed
		0 w_uint32 % checkSumAdjustment
		16#5F0F3CF5 w_uint32 % magicNumber
		flags w_uint16
		unitsPerEm w_uint16
		created w_longDateTime
		modified w_longDateTime
		xMin w_FWord
		yMin w_FWord
		xMax w_FWord
		yMax w_FWord
		macStyle w_uint16
		lowestRecPPEM w_uint16
		fontDirectionHint w_int16
		indexToLocFormat w_int16
		glyphDataFormat w_int16
	end
} bind def

/r_hhea {
	pop
	<<
		/version r_Fixed
		/ascent r_FWord
		/descent r_FWord
		/lineGap r_FWord
		/advanceWidthMax r_uFWord
		/minLeftSideBearing r_FWord
		/minRightSideBearing r_FWord
		/xMaxExtent r_FWord
		/caretSlopeRise r_int16
		/caretSlopeRun r_int16
		/caretOffset r_FWord
		8 r_skip
		/metricDataFormat r_int16
		/numOfLongHorMetrics r_uint16
	>>
} bind def

/w_hhea {
	begin
		/numOfLongHorMetrics t_hmtx /hMetrics get length def % possibly changed
		version w_Fixed
		ascent w_FWord
		descent w_FWord
		lineGap w_FWord
		advanceWidthMax w_uFWord
		minLeftSideBearing w_FWord
		minRightSideBearing w_FWord
		xMaxExtent w_FWord
		caretSlopeRise w_int16
		caretSlopeRun w_int16
		caretOffset w_FWord
		8 w_zero
		metricDataFormat w_int16
		numOfLongHorMetrics w_uint16
	end
} bind def

/r_hmtx {
	pop
	2 dict dup begin
		t_hhea /numOfLongHorMetrics get array
		0 1 2 index length 1 sub {
			1 index exch << /advanceWidth r_uint16 /leftSideBearing r_int16 >> put % longHorMetric
		} for
		/hMetrics exch def
		t_maxp /numGlyphs get t_hhea /numOfLongHorMetrics get sub array
		0 1 2 index length 1 sub {
			1 index exch r_FWord put
		} for
		/leftSideBearing exch def
	end
} bind def

/w_hmtx {
	begin
		hMetrics length
		//MAX_STRING_SIZE 4 idiv % metrics per string
		2 copy div ceiling cvi 1 add array
		0 2 index 4 index 1 sub {
			hMetrics 1 index 4 index 6 index 2 index sub min getinterval {
				begin
					advanceWidth w_uint16
					leftSideBearing w_int16
				end
			} forall
			$w closefile
			1 index exch 3 index idiv scopy put
			/$w sfile def
		} for
		3 1 roll pop pop
		leftSideBearing {
			w_FWord
		} forall
		$w closefile
		dup dup length 1 sub scopy zeropad put % last item, padded
	end
	d_hmtx exch /data exch put
} bind def

/r_loca {
	pop
	t_maxp /numGlyphs get 1 add array % extra entry for end of last glyph
	t_head /indexToLocFormat get 0 eq { {r_uint16 1 bitshift} }{ {r_uint32} } ifelse
	0 1 3 index length 1 sub {
		2 index exch 2 index exec put
	} for
	pop
} bind def

/w_loca {
	t_head /indexToLocFormat get 0 eq {
		{ -1 bitshift w_uint16 } forall
	}{
		$w closefile
		dup length
		//MAX_STRING_SIZE 4 idiv % locas per string
		2 copy div ceiling cvi array
		0 2 index 4 index 1 sub {
			/$w sfile def
			4 index 1 index 4 index 6 index 2 index sub min getinterval {
				w_uint32
			} forall
			$w closefile
			1 index exch 3 index idiv scopy put
		} for
		$w closefile
		4 1 roll pop pop pop
		d_loca exch /data exch put
	} ifelse
} bind def

/r_maxp {
	pop
	<<
		/version r_Fixed
		/numGlyphs r_uint16
		/maxPoints r_uint16
		/maxContours r_uint16
		/maxComponentPoints r_uint16
		/maxComponentContours r_uint16
		/maxZones r_uint16
		/maxTwilightPoints r_uint16
		/maxStorage r_uint16
		/maxFunctionDefs r_uint16
		/maxInstructionDefs r_uint16
		/maxStackElements r_uint16
		/maxSizeOfInstructions r_uint16
		/maxComponentElements r_uint16
		/maxComponentDepth r_uint16
	>>
} bind def

/w_maxp {
	begin
		/numGlyphs t_glyf length def % possibly changed
		version w_Fixed
		numGlyphs w_uint16
		maxPoints w_uint16
		maxContours w_uint16
		maxComponentPoints w_uint16
		maxComponentContours w_uint16
		maxZones w_uint16
		maxTwilightPoints w_uint16
		maxStorage w_uint16
		maxFunctionDefs w_uint16
		maxInstructionDefs w_uint16
		maxStackElements w_uint16
		maxSizeOfInstructions w_uint16
		maxComponentElements w_uint16
		maxComponentDepth w_uint16
	end
} bind def

/r_name {
	<<
		/format r_uint16
		/count r_uint16
		/stringOffset r_uint16
		/nameRecord []
	>>
	[
		1 index /count get {
			<<
				/platformID r_uint16
				/platformSpecificID r_uint16
				/languageID r_uint16
				/nameID r_uint16
				/Length r_uint16
				/offset r_uint16
				/name null
			>>
		} repeat
	]
	2 copy /nameRecord exch put
	3 -1 roll /offset get
	2 index /stringOffset get add
	exch {
		begin
			dup offset add
			$r exch setfileposition
			Length r_string
			/name exch def
		end
	} forall
	pop
} bind def

/r_post {
	pop
	<<
		/format r_Fixed
		/italicAngle r_Fixed
		/underlinePosition r_FWord
		/underlineThickness r_FWord
		/isFixedPitch r_uint32
		/minMemType42 r_uint32
		/maxMemType42 r_uint32
		/minMemType1 r_uint32
		/maxMemType1 r_uint32
		% skip glyph name subtable
	>>
} bind def

/r_prep {
	/Length get r_string % controlValueProgram
} bind def

/w_prep {
	w_string
} bind def

% Microsoft table so use MS names, see https://www.microsoft.com/typography/otspec/os2.htm
/r_os_2 {
	begin
		<<
			/version r_uint16
			/xAvgCharWidth r_int16
			/usWeightClass r_uint16
			/usWidthClass r_uint16
			/fsType r_int16
			/ySubscriptXSize r_int16
			/ySubscriptYSize r_int16
			/ySubscriptXOffset r_int16
			/ySubscriptYOffset r_int16
			/ySuperscriptXSize r_int16
			/ySuperscriptYSize r_int16
			/ySuperscriptXOffset r_int16
			/ySuperscriptYOffset r_int16
			/yStrikeoutSize r_int16
			/yStrikeoutPosition r_int16
			/sFamilyClass r_int16
			/panose 10 r_bytes
			/ulUnicodeRange 4 r_longs
			/achVendID 4 r_string
			/fsSelection r_uint16
			/usFirstCharIndex r_uint16
			/usLastCharIndex r_uint16
			/sTypoAscender r_int16
			/sTypoDescender r_int16
			/sTypoLineGap r_int16
			/usWinAscent r_uint16
			/usWinDescent r_uint16
		>> % version 0 78 bytes
		Length 86 ge { <<
			/ulCodePageRange 2 r_longs
			>> { 3 copy put pop pop } forall
		} if % version 1
		Length 96 ge { <<
			/sxHeight r_int16
			/sCapHeight r_int16
			/usDefaultChar r_uint16
			/usBreakChar r_uint16
			/usMaxContext r_uint16
			>> { 3 copy put pop pop } forall
		} if % version 2,3,4
		Length 100 ge { <<
			/usLowerPointSize r_uint16
			/usUpperPointSize r_uint16
			>> { 3 copy put pop pop } forall
		} if % version 5
	end
} bind def

% helpers

/cid2gid_cmap0 {
	begin 10 dict begin % use cmap dict & temporary dict
		/$cid2gid 256 array def
		0 % max CID
		0 1 255 {
			glyphIndexArray 1 index get % GID
			dup 0 ne {
				$cid2gid 2 index 2 index put
				pop max
			}{
				pop pop
			} ifelse
		} for
		1 add $cid2gid 0 3 -1 roll getinterval
	end end
} bind def

/cid2gid_cmap2 {
	begin 10 dict begin % use cmap dict & temporary dict
		/$cid2gid //MAX_ARRAY_SIZE array def
		0 % max CID
		0 1 255 {
			/$hi exch def
			/$k subHeaderKeys $hi get 8 idiv def % subHeader index
			$hi 0 eq $k 0 ne or {
				subHeaders $k get begin
					firstCode 1 firstCode entryCount add 1 sub {
						/$lo exch def
						/$cid $hi 8 bitshift $lo or def
						$cid max
						$lo firstCode sub firstCodeIndex add % index
						dup 0 lt 1 index glyphIndexArray length ge or {
							(cmap2: outside of glyphIndexArray) warning
							pop 0
						}{
							glyphIndexArray exch get
							dup 0 ne {
								idDelta add
							} if
						} ifelse
						/$gid exch 16#FFFF and def
						$gid 0 ne {
							$cid2gid $cid get null ne {
								(cmap2: multiple GIDs for CID ) $cid concat2 warning
							}{
								$cid2gid $cid $gid put
							} ifelse
						} if
					} for
				end
			} if
		} for
		1 add $cid2gid 0 3 -1 roll getinterval
	end end
} bind def

/cid2gid_cmap4 {
	begin 10 dict begin % use cmap dict & temporary dict
		/$cid2gid //MAX_ARRAY_SIZE array def
		0 % max CID
		0 1 segCount 1 sub {
			/$seg exch def
			/$startCode startCode $seg get def
			/$endCode endCode $seg get def
			/$idDelta idDelta $seg get def
			/$idRangeOffset idRangeOffset $seg get def
			$seg segCount eq $endCode 16#FFFF ne and { (cmap4: last endCode not FFFF) warning } if
			$startCode $endCode gt { (cmap4: startCode > endCode) warning } if
			$idRangeOffset 1 and 0 ne { (cmap4: uneven idRangeOffset) warning } if
			$startCode 16#FFFF ne $idRangeOffset 16#FFFF ne and { % not the end
				$startCode 1 $endCode {
					/$cid 1 index def
					max
					$idRangeOffset 0 ne {
						$idRangeOffset 2 idiv $cid $startCode sub add segCount $seg sub sub % index
						dup 0 lt 1 index glyphIndexArray length ge or {
							(cmap4: outside of glyphIndexArray) warning
							pop 0
						}{
							glyphIndexArray exch get $idDelta add
						} ifelse
					}{
						$cid $idDelta add
					} ifelse
					/$gid exch 16#FFFF and def
					$gid 0 ne {
						$cid2gid $cid get null ne {
							(cmap4: multiple GIDs for CID ) $cid concat2 warning
						}{
							$cid2gid $cid $gid put
						} ifelse
					} if
				} for
			} if
		} for
		1 add $cid2gid 0 3 -1 roll getinterval
	end end
} bind def

/cid2gid_cmap6 {
	begin 10 dict begin % use cmap dict & temporary dict
		/$cid2gid //MAX_ARRAY_SIZE array def
		0 % max CID
		firstCode 1 firstCode entryCount add 1 sub {
			glyphIndexArray 1 index firstCode sub get
			dup 0 ne {
				$cid2gid 2 index 2 index put
				pop max
			}{
				pop pop
			} ifelse
		} for
		1 add $cid2gid 0 3 -1 roll getinterval
	end end
} bind def

/cid2gid_cmap12.0 { % only works for CID < 65535
	begin 10 dict begin % use cmap dict & temporary dict
		/$cid2gid //MAX_ARRAY_SIZE array def
		0 % max CID
		groups {
			/$startCharCode 1 index /startCharCode get def
			/$endCharCode 1 index /endCharCode get def
			/$startGlyphCode 1 index /startGlyphCode get def
			pop
			$startCharCode 1 $endCharCode {
				dup //MAX_CID le {
					/$cid 1 index def
					max
					/$gid $startGlyphCode $cid $startCharCode sub add 16#FFFF and def
					$cid2gid $cid get null ne {
						(cmap12: multiple GIDs for CID ) $cid concat2 warning
					}{
						$cid2gid $cid $gid put
					} ifelse
				}{
					pop
				} ifelse
			} for
		} forall
		1 add $cid2gid 0 3 -1 roll getinterval
	end end
} bind def

% my own compact CID-GID mapper
% makes cgmap (array of [CIDstart GID...] where GID is single or GIDstart -length range)
/cidmap {
	dup length
	dup array % result
	0 % index
	4 2 roll
	0 % cid
	{
		2 copy sub
		dup 0 le { pop exit } if
		{ % find gid
			2 index 1 index get null ne { exit }{ 1 add } ifelse
		} repeat
		dup 1 add
		2 index 1 index sub
		dup 0 lt { pop pop exit } if
		{ % find null
			3 index 1 index get null eq { exit }{ 1 add } ifelse
		} repeat
		exch
		[ exch % cid
			4 index 1 index get % gid
			1 index 1 add
			dup 5 index sub % # more cids
			dup 0 ne {
				neg
				-1 % -length
				8 index 4 -2 roll getinterval {
					dup
					3 index 3 index sub eq {
						pop 1 sub % continues
					}{
						1 index -1 eq { exch }{ -1 } ifelse % breaks
					} ifelse
				} forall
				dup -1 eq { pop } if
			}{
				pop pop
			} ifelse
		]
		5 index exch 5 index exch put
		4 -1 roll 1 add 4 1 roll
	} loop
	pop pop pop
	0 exch getinterval
} bind def

/gid2cid { % for comments
	t_glyf length dict dup begin
		exch
		0 1 2 index length 1 sub {
			2 copy get
			dup null ne {
				exch
				currentdict 2 index known {
					1 index load min % save lowest CID
				} if
				def
			}{
				pop pop
			} ifelse
		} for
		pop
	end
} bind def

/getgids {
	2 copy known not {
		2 copy null put
		2 index exch get
		dup null ne {
			begin
				numberOfContours 0 lt {
					components {
						/glyphIndex get
						3 copy getgids
						pop
					} forall
				} if
			end
		}{
			pop
		} ifelse
	}{
		pop
	} ifelse
	pop pop
} bind def

/setgids {
	begin
		numberOfContours 0 lt {
			components {
				2 copy /glyphIndex get get
				2 copy /glyphIndex exch put
				exch /offset get description exch w_poke16
			} forall
		} if
	end
	pop
} bind def

% make new hmtx from old gid metrics
% takes gids
/sethmetrics {
	% collect hmetrics in new order
	dup length array % collected
	t_hmtx dup /leftSideBearing get exch /hMetrics get
	dup length % old numOfLongHorMetrics
	2 copy 1 sub get /advanceWidth get % last advanceWidth
	6 -1 roll false dsort { % sort by new gid
		aload pop exch % new old gids
		0 max % .notdef if unmapped
		dup 4 index lt {
			4 index exch get
		}{
			3 index sub 5 index exch get
			<< exch /leftSideBearing exch /advanceWidth 5 index >>
		} ifelse
		6 index 3 1 roll put
	} forall
	pop pop pop pop
	% determine new numOfLongHorMetrics
	dup length 1 sub
	2 copy get /advanceWidth get % new last advanceWidth
	exch dup {
		2 index 1 index 1 sub get /advanceWidth get
		2 index ne { exit } if
		1 sub
	} repeat
	1 add exch pop
	% new hMetrics
	2 copy 0 exch getinterval
	3 1 roll
	% new leftSideBearing
	1 index length 1 index sub getinterval
	0 1 2 index length 1 sub {
		2 copy get /leftSideBearing get
		2 index 3 1 roll put
	} for
	% new hmtx
	<< 3 1 roll /leftSideBearing exch /hMetrics 4 -1 roll >>
	/t_hmtx exch def
} bind def

/remap {
	t_glyf
	dup length dict % old to new ids
	% collect used gids from cmap and component glyphs
	0 1 4 index length 1 sub {
		3 index exch get
		dup null ne {
			3 copy getgids
		} if
		pop
	} for
	% assign new gids
	dup 0 0 put % .notdef
	dup 3 index 0 get dup null eq { pop -1 } if 1 put % .null
	dup 3 index 13 get dup null eq { pop -2 } if 2 put % CR
	dup 3 index 32 get dup null eq { pop -3 } if 3 put % space
	4 % gid
	0 1 5 index length 1 sub { % place cid mapped gids first in cid order
		4 index 1 index get % old gid
		dup null ne { % cid mapped
			3 index 1 index get % new gid
			dup null ne { % already assigned
				exch pop
				5 index 3 1 roll put % remap cmap
			}{
				pop
				exch 5 index exch 3 index put % remap cmap
				2 index exch 2 index put % old->new gids
				1 add
			} ifelse
		}{
			pop pop % no glyph
		} ifelse
	} for
	1 index { % place component gids at end in any order
		null eq { % component only
			2 index exch 2 index put
			1 add
		}{
			pop % cid mapped
		} ifelse
	} forall
	% build new glyf array
	array
	1 index {
		exch
		dup 0 ge { % not .null
			4 index exch get % old glyf
			dup null ne {
				3 copy put % new position
				exch pop
				2 index exch setgids
			}{
				pop pop % missing component gid
			} ifelse
		}{
			pop pop
		} ifelse
	} forall
	exch sethmetrics
	exch pop
	/t_glyf exch def
} bind def

/findcmap {
	{
		t_cmap begin % find best cmap
			[[0 4] [0 12.0] [3 4] [3 2]] { % order [platformID format]
				encodingSubtables {
					begin
						dup aload pop exch
						platformID eq exch format eq and {
							pop
							currentdict
							end end
							stop
						} if
					end
				} forall
				pop
			} forall
		end
	} stopped {
		begin
			d_cmap /offset get offset add
			$r 1 index setfileposition
			currentdict
			(r_cmap_) format concat2 cvx exec
			(cid2gid_cmap) format concat2 cvx exec
		end
	}{
		(findcmap: failed to find suitable cmap) warning
		[] % failed
	} ifelse
	/$cmap exch def % CID to GID array with holes
} bind def

/findnames {
	/$names 8 array def % basic names, 8-bit strings where possible
	t_name begin
		0 1 $names length 1 sub {
			nameRecord { % try MS
				begin
					dup nameID eq
					platformID 3 eq languageID 16#FF and 9 eq and % English (16#xx09)
					and {
						dup name ucs2toutf8 $names 3 1 roll put end exit
					} if
				end
			} forall
			$names 1 index get null eq { % not found, try first matching name
				nameRecord {
					begin
						dup nameID eq {
%[platformID platformSpecificID languageID nameID name] ( ) concatas ==
							platformID 1 eq platformSpecificID 0 eq and { % Mac
								dup name $names 3 1 roll put end exit
							} if
							platformID 3 eq { % MS
								dup name ucs2toutf8 $names 3 1 roll put end exit
							} if
						} if
					end
				} forall
			} if
			$names 1 index get null eq { % still not found
				dup $names exch () put % no name
			} if
			pop
		} for
	end
} bind def

/checksum {
	0 % sum
	0 4 3 index length 1 sub {
		0 exch
		3 index exch 4 getinterval {
			exch 8 bitshift or
		} forall
		iadd32
	} for
	exch pop
} bind def

/searchargs {
	begin
		/searchRange 1 def
		/entrySelector -4 def
		/rangeShift 0 def
		numTables 16 mul {
			dup searchRange dup add le { exit } if
			/entrySelector entrySelector 1 add def
			/searchRange searchRange dup add def
		} loop
		searchRange sub
		/rangeShift exch def
	end
} bind def

/zeropad {
	dup length neg 3 and % # pad bytes
	dup 0 ne {
		1 index length add string
		exch 1 index copy pop
	}{
		pop
	} ifelse
} bind def

/getmisc {
	/$underlineposition underlineposition def
	/$underlinethickness underlinethickness def
	/$mincid mincid def
	/$symbolfont $mincid 16#E000 ge maxcid 16#F8FF le and def % Unicode Private Use Area E000-F8FF
	/$tascent tascent def
} bind def

/underlineposition {
	t_post /underlinePosition get
	dup 0 eq {
		pop
		t_head /yMin get 2 div
		underlinethickness -1.5 mul
		max
		round cvi
		(post: underlinePosition=0, using ) 1 index concat2 warning
		t_post /underlinePosition 2 index put
	} if
} bind def

/underlinethickness {
	t_post /underlineThickness get
	dup 0 eq {
		pop
		t_head /unitsPerEm get 10 div % max thickness
		//UNDERLINE_THICKNESS_CIDS {
			$cmap length 1 index gt {
				$cmap exch get
				dup null ne {
					t_glyf exch get
					dup null ne {
						begin
							xMax xMin sub
							yMax yMin sub
							min min
						end
					}{
						pop
					} ifelse
				}{
					pop
				} ifelse
			}{
				pop
			} ifelse
		} forall
		round cvi
		(post: underlineThickness=0, using ) 1 index concat2 warning
		t_post /underlineThickness 2 index put
	} if
} bind def

/mincid {
	0 $cmap { null ne { exit } if 1 add } forall
} bind def

/maxcid {
	$cmap length 1 sub
} bind def

/style {
	[(Regular) (Bold) (Italic) (Bold Italic)] t_head /macStyle get 3 and get
} bind def

% see http://www.typophile.com/node/13081
/linespacing {
	t_hhea begin
		ascent descent abs add lineGap add
	end
} bind def

/tascent {
	$cmap (T) ord get
	dup null ne {
		t_glyf exch get
		dup null ne { /yMax get }{ pop 0 } ifelse
	}{
		pop 0
	} ifelse
	dup 0 eq {
		currentdict /t_os_2 known {
			t_os_2 /sCapHeight known { pop t_os_2 /sCapHeight get } if
		} if
	} if
	dup 0 eq {
		pop t_head /yMax get
	} if
} bind def

% literal code strings to include in output

% binary & compressed inline reader procs
/rb (/RB {string currentfile exch readstring pop} executeonly def) def
/rc (/RC {1 index add exch RB /FlateDecode filter exch string readstring pop} executeonly def) def

(%EOT) heredoc
cidfont dup /CIDFontName get exch /CIDFont defineresource
/CIDFontName get /Identity-H [2 index] composefont pop
%EOT
/install exch def

% cmap
(%EOT) heredoc
/CIDInit /ProcSet findresource begin
	10 dict begin
		begincmap
		/CMapType 1 def
		/CMapName /Identity-H def
		/CIDSystemInfo << /Registry (Adobe) /Ordering (Identity) /Supplement 0 >> def
		1 begincodespacerange
			<0000> <ffff>
		endcodespacerange
		0 usefont
		1 begincidrange
			<0000> <ffff> 0
		endcidrange
		endcmap
		currentdict CMapName exch /CMap defineresource pop
	end

	10 dict begin
		begincmap
		/CMapType 1 def
		/CMapName /UTF8ToUniBMP def
		/CIDSystemInfo << /Registry (Adobe) /Ordering (Identity) /Supplement 0 >> def
		3 begincodespacerange
			<00>     <7F>
			<C280>   <DFBF>
			<E0A080> <EFBFBF>
		endcodespacerange
		0 usefont
		31 begincidrange
			<00> <7F> 0
			<C280> <C2BF> 128
			<C380> <C3BF> 192
			<C480> <C4BF> 256
			<C580> <C5BF> 320
			<C680> <C6BF> 384
			<C780> <C7BF> 448
			<C880> <C8BF> 512
			<C980> <C9BF> 576
			<CA80> <CABF> 640
			<CB80> <CBBF> 704
			<CC80> <CCBF> 768
			<CD80> <CDBF> 832
			<CE80> <CEBF> 896
			<CF80> <CFBF> 960
			<D080> <D0BF> 1024
			<D180> <D1BF> 1088
			<D280> <D2BF> 1152
			<D380> <D3BF> 1216
			<D480> <D4BF> 1280
			<D580> <D5BF> 1344
			<D680> <D6BF> 1408
			<D780> <D7BF> 1472
			<D880> <D8BF> 1536
			<D980> <D9BF> 1600
			<DA80> <DABF> 1664
			<DB80> <DBBF> 1728
			<DC80> <DCBF> 1792
			<DD80> <DDBF> 1856
			<DE80> <DEBF> 1920
			<DF80> <DFBF> 1984
		endcidrange
		64 begincidrange
			<E0A080> <E0A0BF> 2048
			<E0A180> <E0A1BF> 2112
			<E0A280> <E0A2BF> 2176
			<E0A380> <E0A3BF> 2240
			<E0A480> <E0A4BF> 2304
			<E0A580> <E0A5BF> 2368
			<E0A680> <E0A6BF> 2432
			<E0A780> <E0A7BF> 2496
			<E0A880> <E0A8BF> 2560
			<E0A980> <E0A9BF> 2624
			<E0AA80> <E0AABF> 2688
			<E0AB80> <E0ABBF> 2752
			<E0AC80> <E0ACBF> 2816
			<E0AD80> <E0ADBF> 2880
			<E0AE80> <E0AEBF> 2944
			<E0AF80> <E0AFBF> 3008
			<E0B080> <E0B0BF> 3072
			<E0B180> <E0B1BF> 3136
			<E0B280> <E0B2BF> 3200
			<E0B380> <E0B3BF> 3264
			<E0B480> <E0B4BF> 3328
			<E0B580> <E0B5BF> 3392
			<E0B680> <E0B6BF> 3456
			<E0B780> <E0B7BF> 3520
			<E0B880> <E0B8BF> 3584
			<E0B980> <E0B9BF> 3648
			<E0BA80> <E0BABF> 3712
			<E0BB80> <E0BBBF> 3776
			<E0BC80> <E0BCBF> 3840
			<E0BD80> <E0BDBF> 3904
			<E0BE80> <E0BEBF> 3968
			<E0BF80> <E0BFBF> 4032
			<E18080> <E180BF> 4096
			<E18180> <E181BF> 4160
			<E18280> <E182BF> 4224
			<E18380> <E183BF> 4288
			<E18480> <E184BF> 4352
			<E18580> <E185BF> 4416
			<E18680> <E186BF> 4480
			<E18780> <E187BF> 4544
			<E18880> <E188BF> 4608
			<E18980> <E189BF> 4672
			<E18A80> <E18ABF> 4736
			<E18B80> <E18BBF> 4800
			<E18C80> <E18CBF> 4864
			<E18D80> <E18DBF> 4928
			<E18E80> <E18EBF> 4992
			<E18F80> <E18FBF> 5056
			<E19080> <E190BF> 5120
			<E19180> <E191BF> 5184
			<E19280> <E192BF> 5248
			<E19380> <E193BF> 5312
			<E19480> <E194BF> 5376
			<E19580> <E195BF> 5440
			<E19680> <E196BF> 5504
			<E19780> <E197BF> 5568
			<E19880> <E198BF> 5632
			<E19980> <E199BF> 5696
			<E19A80> <E19ABF> 5760
			<E19B80> <E19BBF> 5824
			<E19C80> <E19CBF> 5888
			<E19D80> <E19DBF> 5952
			<E19E80> <E19EBF> 6016
			<E19F80> <E19FBF> 6080
		endcidrange
		64 begincidrange
			<E1A080> <E1A0BF> 6144
			<E1A180> <E1A1BF> 6208
			<E1A280> <E1A2BF> 6272
			<E1A380> <E1A3BF> 6336
			<E1A480> <E1A4BF> 6400
			<E1A580> <E1A5BF> 6464
			<E1A680> <E1A6BF> 6528
			<E1A780> <E1A7BF> 6592
			<E1A880> <E1A8BF> 6656
			<E1A980> <E1A9BF> 6720
			<E1AA80> <E1AABF> 6784
			<E1AB80> <E1ABBF> 6848
			<E1AC80> <E1ACBF> 6912
			<E1AD80> <E1ADBF> 6976
			<E1AE80> <E1AEBF> 7040
			<E1AF80> <E1AFBF> 7104
			<E1B080> <E1B0BF> 7168
			<E1B180> <E1B1BF> 7232
			<E1B280> <E1B2BF> 7296
			<E1B380> <E1B3BF> 7360
			<E1B480> <E1B4BF> 7424
			<E1B580> <E1B5BF> 7488
			<E1B680> <E1B6BF> 7552
			<E1B780> <E1B7BF> 7616
			<E1B880> <E1B8BF> 7680
			<E1B980> <E1B9BF> 7744
			<E1BA80> <E1BABF> 7808
			<E1BB80> <E1BBBF> 7872
			<E1BC80> <E1BCBF> 7936
			<E1BD80> <E1BDBF> 8000
			<E1BE80> <E1BEBF> 8064
			<E1BF80> <E1BFBF> 8128
			<E28080> <E280BF> 8192
			<E28180> <E281BF> 8256
			<E28280> <E282BF> 8320
			<E28380> <E283BF> 8384
			<E28480> <E284BF> 8448
			<E28580> <E285BF> 8512
			<E28680> <E286BF> 8576
			<E28780> <E287BF> 8640
			<E28880> <E288BF> 8704
			<E28980> <E289BF> 8768
			<E28A80> <E28ABF> 8832
			<E28B80> <E28BBF> 8896
			<E28C80> <E28CBF> 8960
			<E28D80> <E28DBF> 9024
			<E28E80> <E28EBF> 9088
			<E28F80> <E28FBF> 9152
			<E29080> <E290BF> 9216
			<E29180> <E291BF> 9280
			<E29280> <E292BF> 9344
			<E29380> <E293BF> 9408
			<E29480> <E294BF> 9472
			<E29580> <E295BF> 9536
			<E29680> <E296BF> 9600
			<E29780> <E297BF> 9664
			<E29880> <E298BF> 9728
			<E29980> <E299BF> 9792
			<E29A80> <E29ABF> 9856
			<E29B80> <E29BBF> 9920
			<E29C80> <E29CBF> 9984
			<E29D80> <E29DBF> 10048
			<E29E80> <E29EBF> 10112
			<E29F80> <E29FBF> 10176
		endcidrange
		64 begincidrange
			<E2A080> <E2A0BF> 10240
			<E2A180> <E2A1BF> 10304
			<E2A280> <E2A2BF> 10368
			<E2A380> <E2A3BF> 10432
			<E2A480> <E2A4BF> 10496
			<E2A580> <E2A5BF> 10560
			<E2A680> <E2A6BF> 10624
			<E2A780> <E2A7BF> 10688
			<E2A880> <E2A8BF> 10752
			<E2A980> <E2A9BF> 10816
			<E2AA80> <E2AABF> 10880
			<E2AB80> <E2ABBF> 10944
			<E2AC80> <E2ACBF> 11008
			<E2AD80> <E2ADBF> 11072
			<E2AE80> <E2AEBF> 11136
			<E2AF80> <E2AFBF> 11200
			<E2B080> <E2B0BF> 11264
			<E2B180> <E2B1BF> 11328
			<E2B280> <E2B2BF> 11392
			<E2B380> <E2B3BF> 11456
			<E2B480> <E2B4BF> 11520
			<E2B580> <E2B5BF> 11584
			<E2B680> <E2B6BF> 11648
			<E2B780> <E2B7BF> 11712
			<E2B880> <E2B8BF> 11776
			<E2B980> <E2B9BF> 11840
			<E2BA80> <E2BABF> 11904
			<E2BB80> <E2BBBF> 11968
			<E2BC80> <E2BCBF> 12032
			<E2BD80> <E2BDBF> 12096
			<E2BE80> <E2BEBF> 12160
			<E2BF80> <E2BFBF> 12224
			<E38080> <E380BF> 12288
			<E38180> <E381BF> 12352
			<E38280> <E382BF> 12416
			<E38380> <E383BF> 12480
			<E38480> <E384BF> 12544
			<E38580> <E385BF> 12608
			<E38680> <E386BF> 12672
			<E38780> <E387BF> 12736
			<E38880> <E388BF> 12800
			<E38980> <E389BF> 12864
			<E38A80> <E38ABF> 12928
			<E38B80> <E38BBF> 12992
			<E38C80> <E38CBF> 13056
			<E38D80> <E38DBF> 13120
			<E38E80> <E38EBF> 13184
			<E38F80> <E38FBF> 13248
			<E39080> <E390BF> 13312
			<E39180> <E391BF> 13376
			<E39280> <E392BF> 13440
			<E39380> <E393BF> 13504
			<E39480> <E394BF> 13568
			<E39580> <E395BF> 13632
			<E39680> <E396BF> 13696
			<E39780> <E397BF> 13760
			<E39880> <E398BF> 13824
			<E39980> <E399BF> 13888
			<E39A80> <E39ABF> 13952
			<E39B80> <E39BBF> 14016
			<E39C80> <E39CBF> 14080
			<E39D80> <E39DBF> 14144
			<E39E80> <E39EBF> 14208
			<E39F80> <E39FBF> 14272
		endcidrange
		64 begincidrange
			<E3A080> <E3A0BF> 14336
			<E3A180> <E3A1BF> 14400
			<E3A280> <E3A2BF> 14464
			<E3A380> <E3A3BF> 14528
			<E3A480> <E3A4BF> 14592
			<E3A580> <E3A5BF> 14656
			<E3A680> <E3A6BF> 14720
			<E3A780> <E3A7BF> 14784
			<E3A880> <E3A8BF> 14848
			<E3A980> <E3A9BF> 14912
			<E3AA80> <E3AABF> 14976
			<E3AB80> <E3ABBF> 15040
			<E3AC80> <E3ACBF> 15104
			<E3AD80> <E3ADBF> 15168
			<E3AE80> <E3AEBF> 15232
			<E3AF80> <E3AFBF> 15296
			<E3B080> <E3B0BF> 15360
			<E3B180> <E3B1BF> 15424
			<E3B280> <E3B2BF> 15488
			<E3B380> <E3B3BF> 15552
			<E3B480> <E3B4BF> 15616
			<E3B580> <E3B5BF> 15680
			<E3B680> <E3B6BF> 15744
			<E3B780> <E3B7BF> 15808
			<E3B880> <E3B8BF> 15872
			<E3B980> <E3B9BF> 15936
			<E3BA80> <E3BABF> 16000
			<E3BB80> <E3BBBF> 16064
			<E3BC80> <E3BCBF> 16128
			<E3BD80> <E3BDBF> 16192
			<E3BE80> <E3BEBF> 16256
			<E3BF80> <E3BFBF> 16320
			<E48080> <E480BF> 16384
			<E48180> <E481BF> 16448
			<E48280> <E482BF> 16512
			<E48380> <E483BF> 16576
			<E48480> <E484BF> 16640
			<E48580> <E485BF> 16704
			<E48680> <E486BF> 16768
			<E48780> <E487BF> 16832
			<E48880> <E488BF> 16896
			<E48980> <E489BF> 16960
			<E48A80> <E48ABF> 17024
			<E48B80> <E48BBF> 17088
			<E48C80> <E48CBF> 17152
			<E48D80> <E48DBF> 17216
			<E48E80> <E48EBF> 17280
			<E48F80> <E48FBF> 17344
			<E49080> <E490BF> 17408
			<E49180> <E491BF> 17472
			<E49280> <E492BF> 17536
			<E49380> <E493BF> 17600
			<E49480> <E494BF> 17664
			<E49580> <E495BF> 17728
			<E49680> <E496BF> 17792
			<E49780> <E497BF> 17856
			<E49880> <E498BF> 17920
			<E49980> <E499BF> 17984
			<E49A80> <E49ABF> 18048
			<E49B80> <E49BBF> 18112
			<E49C80> <E49CBF> 18176
			<E49D80> <E49DBF> 18240
			<E49E80> <E49EBF> 18304
			<E49F80> <E49FBF> 18368
		endcidrange
		64 begincidrange
			<E4A080> <E4A0BF> 18432
			<E4A180> <E4A1BF> 18496
			<E4A280> <E4A2BF> 18560
			<E4A380> <E4A3BF> 18624
			<E4A480> <E4A4BF> 18688
			<E4A580> <E4A5BF> 18752
			<E4A680> <E4A6BF> 18816
			<E4A780> <E4A7BF> 18880
			<E4A880> <E4A8BF> 18944
			<E4A980> <E4A9BF> 19008
			<E4AA80> <E4AABF> 19072
			<E4AB80> <E4ABBF> 19136
			<E4AC80> <E4ACBF> 19200
			<E4AD80> <E4ADBF> 19264
			<E4AE80> <E4AEBF> 19328
			<E4AF80> <E4AFBF> 19392
			<E4B080> <E4B0BF> 19456
			<E4B180> <E4B1BF> 19520
			<E4B280> <E4B2BF> 19584
			<E4B380> <E4B3BF> 19648
			<E4B480> <E4B4BF> 19712
			<E4B580> <E4B5BF> 19776
			<E4B680> <E4B6BF> 19840
			<E4B780> <E4B7BF> 19904
			<E4B880> <E4B8BF> 19968
			<E4B980> <E4B9BF> 20032
			<E4BA80> <E4BABF> 20096
			<E4BB80> <E4BBBF> 20160
			<E4BC80> <E4BCBF> 20224
			<E4BD80> <E4BDBF> 20288
			<E4BE80> <E4BEBF> 20352
			<E4BF80> <E4BFBF> 20416
			<E58080> <E580BF> 20480
			<E58180> <E581BF> 20544
			<E58280> <E582BF> 20608
			<E58380> <E583BF> 20672
			<E58480> <E584BF> 20736
			<E58580> <E585BF> 20800
			<E58680> <E586BF> 20864
			<E58780> <E587BF> 20928
			<E58880> <E588BF> 20992
			<E58980> <E589BF> 21056
			<E58A80> <E58ABF> 21120
			<E58B80> <E58BBF> 21184
			<E58C80> <E58CBF> 21248
			<E58D80> <E58DBF> 21312
			<E58E80> <E58EBF> 21376
			<E58F80> <E58FBF> 21440
			<E59080> <E590BF> 21504
			<E59180> <E591BF> 21568
			<E59280> <E592BF> 21632
			<E59380> <E593BF> 21696
			<E59480> <E594BF> 21760
			<E59580> <E595BF> 21824
			<E59680> <E596BF> 21888
			<E59780> <E597BF> 21952
			<E59880> <E598BF> 22016
			<E59980> <E599BF> 22080
			<E59A80> <E59ABF> 22144
			<E59B80> <E59BBF> 22208
			<E59C80> <E59CBF> 22272
			<E59D80> <E59DBF> 22336
			<E59E80> <E59EBF> 22400
			<E59F80> <E59FBF> 22464
		endcidrange
		64 begincidrange
			<E5A080> <E5A0BF> 22528
			<E5A180> <E5A1BF> 22592
			<E5A280> <E5A2BF> 22656
			<E5A380> <E5A3BF> 22720
			<E5A480> <E5A4BF> 22784
			<E5A580> <E5A5BF> 22848
			<E5A680> <E5A6BF> 22912
			<E5A780> <E5A7BF> 22976
			<E5A880> <E5A8BF> 23040
			<E5A980> <E5A9BF> 23104
			<E5AA80> <E5AABF> 23168
			<E5AB80> <E5ABBF> 23232
			<E5AC80> <E5ACBF> 23296
			<E5AD80> <E5ADBF> 23360
			<E5AE80> <E5AEBF> 23424
			<E5AF80> <E5AFBF> 23488
			<E5B080> <E5B0BF> 23552
			<E5B180> <E5B1BF> 23616
			<E5B280> <E5B2BF> 23680
			<E5B380> <E5B3BF> 23744
			<E5B480> <E5B4BF> 23808
			<E5B580> <E5B5BF> 23872
			<E5B680> <E5B6BF> 23936
			<E5B780> <E5B7BF> 24000
			<E5B880> <E5B8BF> 24064
			<E5B980> <E5B9BF> 24128
			<E5BA80> <E5BABF> 24192
			<E5BB80> <E5BBBF> 24256
			<E5BC80> <E5BCBF> 24320
			<E5BD80> <E5BDBF> 24384
			<E5BE80> <E5BEBF> 24448
			<E5BF80> <E5BFBF> 24512
			<E68080> <E680BF> 24576
			<E68180> <E681BF> 24640
			<E68280> <E682BF> 24704
			<E68380> <E683BF> 24768
			<E68480> <E684BF> 24832
			<E68580> <E685BF> 24896
			<E68680> <E686BF> 24960
			<E68780> <E687BF> 25024
			<E68880> <E688BF> 25088
			<E68980> <E689BF> 25152
			<E68A80> <E68ABF> 25216
			<E68B80> <E68BBF> 25280
			<E68C80> <E68CBF> 25344
			<E68D80> <E68DBF> 25408
			<E68E80> <E68EBF> 25472
			<E68F80> <E68FBF> 25536
			<E69080> <E690BF> 25600
			<E69180> <E691BF> 25664
			<E69280> <E692BF> 25728
			<E69380> <E693BF> 25792
			<E69480> <E694BF> 25856
			<E69580> <E695BF> 25920
			<E69680> <E696BF> 25984
			<E69780> <E697BF> 26048
			<E69880> <E698BF> 26112
			<E69980> <E699BF> 26176
			<E69A80> <E69ABF> 26240
			<E69B80> <E69BBF> 26304
			<E69C80> <E69CBF> 26368
			<E69D80> <E69DBF> 26432
			<E69E80> <E69EBF> 26496
			<E69F80> <E69FBF> 26560
		endcidrange
		64 begincidrange
			<E6A080> <E6A0BF> 26624
			<E6A180> <E6A1BF> 26688
			<E6A280> <E6A2BF> 26752
			<E6A380> <E6A3BF> 26816
			<E6A480> <E6A4BF> 26880
			<E6A580> <E6A5BF> 26944
			<E6A680> <E6A6BF> 27008
			<E6A780> <E6A7BF> 27072
			<E6A880> <E6A8BF> 27136
			<E6A980> <E6A9BF> 27200
			<E6AA80> <E6AABF> 27264
			<E6AB80> <E6ABBF> 27328
			<E6AC80> <E6ACBF> 27392
			<E6AD80> <E6ADBF> 27456
			<E6AE80> <E6AEBF> 27520
			<E6AF80> <E6AFBF> 27584
			<E6B080> <E6B0BF> 27648
			<E6B180> <E6B1BF> 27712
			<E6B280> <E6B2BF> 27776
			<E6B380> <E6B3BF> 27840
			<E6B480> <E6B4BF> 27904
			<E6B580> <E6B5BF> 27968
			<E6B680> <E6B6BF> 28032
			<E6B780> <E6B7BF> 28096
			<E6B880> <E6B8BF> 28160
			<E6B980> <E6B9BF> 28224
			<E6BA80> <E6BABF> 28288
			<E6BB80> <E6BBBF> 28352
			<E6BC80> <E6BCBF> 28416
			<E6BD80> <E6BDBF> 28480
			<E6BE80> <E6BEBF> 28544
			<E6BF80> <E6BFBF> 28608
			<E78080> <E780BF> 28672
			<E78180> <E781BF> 28736
			<E78280> <E782BF> 28800
			<E78380> <E783BF> 28864
			<E78480> <E784BF> 28928
			<E78580> <E785BF> 28992
			<E78680> <E786BF> 29056
			<E78780> <E787BF> 29120
			<E78880> <E788BF> 29184
			<E78980> <E789BF> 29248
			<E78A80> <E78ABF> 29312
			<E78B80> <E78BBF> 29376
			<E78C80> <E78CBF> 29440
			<E78D80> <E78DBF> 29504
			<E78E80> <E78EBF> 29568
			<E78F80> <E78FBF> 29632
			<E79080> <E790BF> 29696
			<E79180> <E791BF> 29760
			<E79280> <E792BF> 29824
			<E79380> <E793BF> 29888
			<E79480> <E794BF> 29952
			<E79580> <E795BF> 30016
			<E79680> <E796BF> 30080
			<E79780> <E797BF> 30144
			<E79880> <E798BF> 30208
			<E79980> <E799BF> 30272
			<E79A80> <E79ABF> 30336
			<E79B80> <E79BBF> 30400
			<E79C80> <E79CBF> 30464
			<E79D80> <E79DBF> 30528
			<E79E80> <E79EBF> 30592
			<E79F80> <E79FBF> 30656
		endcidrange
		64 begincidrange
			<E7A080> <E7A0BF> 30720
			<E7A180> <E7A1BF> 30784
			<E7A280> <E7A2BF> 30848
			<E7A380> <E7A3BF> 30912
			<E7A480> <E7A4BF> 30976
			<E7A580> <E7A5BF> 31040
			<E7A680> <E7A6BF> 31104
			<E7A780> <E7A7BF> 31168
			<E7A880> <E7A8BF> 31232
			<E7A980> <E7A9BF> 31296
			<E7AA80> <E7AABF> 31360
			<E7AB80> <E7ABBF> 31424
			<E7AC80> <E7ACBF> 31488
			<E7AD80> <E7ADBF> 31552
			<E7AE80> <E7AEBF> 31616
			<E7AF80> <E7AFBF> 31680
			<E7B080> <E7B0BF> 31744
			<E7B180> <E7B1BF> 31808
			<E7B280> <E7B2BF> 31872
			<E7B380> <E7B3BF> 31936
			<E7B480> <E7B4BF> 32000
			<E7B580> <E7B5BF> 32064
			<E7B680> <E7B6BF> 32128
			<E7B780> <E7B7BF> 32192
			<E7B880> <E7B8BF> 32256
			<E7B980> <E7B9BF> 32320
			<E7BA80> <E7BABF> 32384
			<E7BB80> <E7BBBF> 32448
			<E7BC80> <E7BCBF> 32512
			<E7BD80> <E7BDBF> 32576
			<E7BE80> <E7BEBF> 32640
			<E7BF80> <E7BFBF> 32704
			<E88080> <E880BF> 32768
			<E88180> <E881BF> 32832
			<E88280> <E882BF> 32896
			<E88380> <E883BF> 32960
			<E88480> <E884BF> 33024
			<E88580> <E885BF> 33088
			<E88680> <E886BF> 33152
			<E88780> <E887BF> 33216
			<E88880> <E888BF> 33280
			<E88980> <E889BF> 33344
			<E88A80> <E88ABF> 33408
			<E88B80> <E88BBF> 33472
			<E88C80> <E88CBF> 33536
			<E88D80> <E88DBF> 33600
			<E88E80> <E88EBF> 33664
			<E88F80> <E88FBF> 33728
			<E89080> <E890BF> 33792
			<E89180> <E891BF> 33856
			<E89280> <E892BF> 33920
			<E89380> <E893BF> 33984
			<E89480> <E894BF> 34048
			<E89580> <E895BF> 34112
			<E89680> <E896BF> 34176
			<E89780> <E897BF> 34240
			<E89880> <E898BF> 34304
			<E89980> <E899BF> 34368
			<E89A80> <E89ABF> 34432
			<E89B80> <E89BBF> 34496
			<E89C80> <E89CBF> 34560
			<E89D80> <E89DBF> 34624
			<E89E80> <E89EBF> 34688
			<E89F80> <E89FBF> 34752
		endcidrange
		64 begincidrange
			<E8A080> <E8A0BF> 34816
			<E8A180> <E8A1BF> 34880
			<E8A280> <E8A2BF> 34944
			<E8A380> <E8A3BF> 35008
			<E8A480> <E8A4BF> 35072
			<E8A580> <E8A5BF> 35136
			<E8A680> <E8A6BF> 35200
			<E8A780> <E8A7BF> 35264
			<E8A880> <E8A8BF> 35328
			<E8A980> <E8A9BF> 35392
			<E8AA80> <E8AABF> 35456
			<E8AB80> <E8ABBF> 35520
			<E8AC80> <E8ACBF> 35584
			<E8AD80> <E8ADBF> 35648
			<E8AE80> <E8AEBF> 35712
			<E8AF80> <E8AFBF> 35776
			<E8B080> <E8B0BF> 35840
			<E8B180> <E8B1BF> 35904
			<E8B280> <E8B2BF> 35968
			<E8B380> <E8B3BF> 36032
			<E8B480> <E8B4BF> 36096
			<E8B580> <E8B5BF> 36160
			<E8B680> <E8B6BF> 36224
			<E8B780> <E8B7BF> 36288
			<E8B880> <E8B8BF> 36352
			<E8B980> <E8B9BF> 36416
			<E8BA80> <E8BABF> 36480
			<E8BB80> <E8BBBF> 36544
			<E8BC80> <E8BCBF> 36608
			<E8BD80> <E8BDBF> 36672
			<E8BE80> <E8BEBF> 36736
			<E8BF80> <E8BFBF> 36800
			<E98080> <E980BF> 36864
			<E98180> <E981BF> 36928
			<E98280> <E982BF> 36992
			<E98380> <E983BF> 37056
			<E98480> <E984BF> 37120
			<E98580> <E985BF> 37184
			<E98680> <E986BF> 37248
			<E98780> <E987BF> 37312
			<E98880> <E988BF> 37376
			<E98980> <E989BF> 37440
			<E98A80> <E98ABF> 37504
			<E98B80> <E98BBF> 37568
			<E98C80> <E98CBF> 37632
			<E98D80> <E98DBF> 37696
			<E98E80> <E98EBF> 37760
			<E98F80> <E98FBF> 37824
			<E99080> <E990BF> 37888
			<E99180> <E991BF> 37952
			<E99280> <E992BF> 38016
			<E99380> <E993BF> 38080
			<E99480> <E994BF> 38144
			<E99580> <E995BF> 38208
			<E99680> <E996BF> 38272
			<E99780> <E997BF> 38336
			<E99880> <E998BF> 38400
			<E99980> <E999BF> 38464
			<E99A80> <E99ABF> 38528
			<E99B80> <E99BBF> 38592
			<E99C80> <E99CBF> 38656
			<E99D80> <E99DBF> 38720
			<E99E80> <E99EBF> 38784
			<E99F80> <E99FBF> 38848
		endcidrange
		64 begincidrange
			<E9A080> <E9A0BF> 38912
			<E9A180> <E9A1BF> 38976
			<E9A280> <E9A2BF> 39040
			<E9A380> <E9A3BF> 39104
			<E9A480> <E9A4BF> 39168
			<E9A580> <E9A5BF> 39232
			<E9A680> <E9A6BF> 39296
			<E9A780> <E9A7BF> 39360
			<E9A880> <E9A8BF> 39424
			<E9A980> <E9A9BF> 39488
			<E9AA80> <E9AABF> 39552
			<E9AB80> <E9ABBF> 39616
			<E9AC80> <E9ACBF> 39680
			<E9AD80> <E9ADBF> 39744
			<E9AE80> <E9AEBF> 39808
			<E9AF80> <E9AFBF> 39872
			<E9B080> <E9B0BF> 39936
			<E9B180> <E9B1BF> 40000
			<E9B280> <E9B2BF> 40064
			<E9B380> <E9B3BF> 40128
			<E9B480> <E9B4BF> 40192
			<E9B580> <E9B5BF> 40256
			<E9B680> <E9B6BF> 40320
			<E9B780> <E9B7BF> 40384
			<E9B880> <E9B8BF> 40448
			<E9B980> <E9B9BF> 40512
			<E9BA80> <E9BABF> 40576
			<E9BB80> <E9BBBF> 40640
			<E9BC80> <E9BCBF> 40704
			<E9BD80> <E9BDBF> 40768
			<E9BE80> <E9BEBF> 40832
			<E9BF80> <E9BFBF> 40896
			<EA8080> <EA80BF> 40960
			<EA8180> <EA81BF> 41024
			<EA8280> <EA82BF> 41088
			<EA8380> <EA83BF> 41152
			<EA8480> <EA84BF> 41216
			<EA8580> <EA85BF> 41280
			<EA8680> <EA86BF> 41344
			<EA8780> <EA87BF> 41408
			<EA8880> <EA88BF> 41472
			<EA8980> <EA89BF> 41536
			<EA8A80> <EA8ABF> 41600
			<EA8B80> <EA8BBF> 41664
			<EA8C80> <EA8CBF> 41728
			<EA8D80> <EA8DBF> 41792
			<EA8E80> <EA8EBF> 41856
			<EA8F80> <EA8FBF> 41920
			<EA9080> <EA90BF> 41984
			<EA9180> <EA91BF> 42048
			<EA9280> <EA92BF> 42112
			<EA9380> <EA93BF> 42176
			<EA9480> <EA94BF> 42240
			<EA9580> <EA95BF> 42304
			<EA9680> <EA96BF> 42368
			<EA9780> <EA97BF> 42432
			<EA9880> <EA98BF> 42496
			<EA9980> <EA99BF> 42560
			<EA9A80> <EA9ABF> 42624
			<EA9B80> <EA9BBF> 42688
			<EA9C80> <EA9CBF> 42752
			<EA9D80> <EA9DBF> 42816
			<EA9E80> <EA9EBF> 42880
			<EA9F80> <EA9FBF> 42944
		endcidrange
		64 begincidrange
			<EAA080> <EAA0BF> 43008
			<EAA180> <EAA1BF> 43072
			<EAA280> <EAA2BF> 43136
			<EAA380> <EAA3BF> 43200
			<EAA480> <EAA4BF> 43264
			<EAA580> <EAA5BF> 43328
			<EAA680> <EAA6BF> 43392
			<EAA780> <EAA7BF> 43456
			<EAA880> <EAA8BF> 43520
			<EAA980> <EAA9BF> 43584
			<EAAA80> <EAAABF> 43648
			<EAAB80> <EAABBF> 43712
			<EAAC80> <EAACBF> 43776
			<EAAD80> <EAADBF> 43840
			<EAAE80> <EAAEBF> 43904
			<EAAF80> <EAAFBF> 43968
			<EAB080> <EAB0BF> 44032
			<EAB180> <EAB1BF> 44096
			<EAB280> <EAB2BF> 44160
			<EAB380> <EAB3BF> 44224
			<EAB480> <EAB4BF> 44288
			<EAB580> <EAB5BF> 44352
			<EAB680> <EAB6BF> 44416
			<EAB780> <EAB7BF> 44480
			<EAB880> <EAB8BF> 44544
			<EAB980> <EAB9BF> 44608
			<EABA80> <EABABF> 44672
			<EABB80> <EABBBF> 44736
			<EABC80> <EABCBF> 44800
			<EABD80> <EABDBF> 44864
			<EABE80> <EABEBF> 44928
			<EABF80> <EABFBF> 44992
			<EB8080> <EB80BF> 45056
			<EB8180> <EB81BF> 45120
			<EB8280> <EB82BF> 45184
			<EB8380> <EB83BF> 45248
			<EB8480> <EB84BF> 45312
			<EB8580> <EB85BF> 45376
			<EB8680> <EB86BF> 45440
			<EB8780> <EB87BF> 45504
			<EB8880> <EB88BF> 45568
			<EB8980> <EB89BF> 45632
			<EB8A80> <EB8ABF> 45696
			<EB8B80> <EB8BBF> 45760
			<EB8C80> <EB8CBF> 45824
			<EB8D80> <EB8DBF> 45888
			<EB8E80> <EB8EBF> 45952
			<EB8F80> <EB8FBF> 46016
			<EB9080> <EB90BF> 46080
			<EB9180> <EB91BF> 46144
			<EB9280> <EB92BF> 46208
			<EB9380> <EB93BF> 46272
			<EB9480> <EB94BF> 46336
			<EB9580> <EB95BF> 46400
			<EB9680> <EB96BF> 46464
			<EB9780> <EB97BF> 46528
			<EB9880> <EB98BF> 46592
			<EB9980> <EB99BF> 46656
			<EB9A80> <EB9ABF> 46720
			<EB9B80> <EB9BBF> 46784
			<EB9C80> <EB9CBF> 46848
			<EB9D80> <EB9DBF> 46912
			<EB9E80> <EB9EBF> 46976
			<EB9F80> <EB9FBF> 47040
		endcidrange
		64 begincidrange
			<EBA080> <EBA0BF> 47104
			<EBA180> <EBA1BF> 47168
			<EBA280> <EBA2BF> 47232
			<EBA380> <EBA3BF> 47296
			<EBA480> <EBA4BF> 47360
			<EBA580> <EBA5BF> 47424
			<EBA680> <EBA6BF> 47488
			<EBA780> <EBA7BF> 47552
			<EBA880> <EBA8BF> 47616
			<EBA980> <EBA9BF> 47680
			<EBAA80> <EBAABF> 47744
			<EBAB80> <EBABBF> 47808
			<EBAC80> <EBACBF> 47872
			<EBAD80> <EBADBF> 47936
			<EBAE80> <EBAEBF> 48000
			<EBAF80> <EBAFBF> 48064
			<EBB080> <EBB0BF> 48128
			<EBB180> <EBB1BF> 48192
			<EBB280> <EBB2BF> 48256
			<EBB380> <EBB3BF> 48320
			<EBB480> <EBB4BF> 48384
			<EBB580> <EBB5BF> 48448
			<EBB680> <EBB6BF> 48512
			<EBB780> <EBB7BF> 48576
			<EBB880> <EBB8BF> 48640
			<EBB980> <EBB9BF> 48704
			<EBBA80> <EBBABF> 48768
			<EBBB80> <EBBBBF> 48832
			<EBBC80> <EBBCBF> 48896
			<EBBD80> <EBBDBF> 48960
			<EBBE80> <EBBEBF> 49024
			<EBBF80> <EBBFBF> 49088
			<EC8080> <EC80BF> 49152
			<EC8180> <EC81BF> 49216
			<EC8280> <EC82BF> 49280
			<EC8380> <EC83BF> 49344
			<EC8480> <EC84BF> 49408
			<EC8580> <EC85BF> 49472
			<EC8680> <EC86BF> 49536
			<EC8780> <EC87BF> 49600
			<EC8880> <EC88BF> 49664
			<EC8980> <EC89BF> 49728
			<EC8A80> <EC8ABF> 49792
			<EC8B80> <EC8BBF> 49856
			<EC8C80> <EC8CBF> 49920
			<EC8D80> <EC8DBF> 49984
			<EC8E80> <EC8EBF> 50048
			<EC8F80> <EC8FBF> 50112
			<EC9080> <EC90BF> 50176
			<EC9180> <EC91BF> 50240
			<EC9280> <EC92BF> 50304
			<EC9380> <EC93BF> 50368
			<EC9480> <EC94BF> 50432
			<EC9580> <EC95BF> 50496
			<EC9680> <EC96BF> 50560
			<EC9780> <EC97BF> 50624
			<EC9880> <EC98BF> 50688
			<EC9980> <EC99BF> 50752
			<EC9A80> <EC9ABF> 50816
			<EC9B80> <EC9BBF> 50880
			<EC9C80> <EC9CBF> 50944
			<EC9D80> <EC9DBF> 51008
			<EC9E80> <EC9EBF> 51072
			<EC9F80> <EC9FBF> 51136
		endcidrange
		64 begincidrange
			<ECA080> <ECA0BF> 51200
			<ECA180> <ECA1BF> 51264
			<ECA280> <ECA2BF> 51328
			<ECA380> <ECA3BF> 51392
			<ECA480> <ECA4BF> 51456
			<ECA580> <ECA5BF> 51520
			<ECA680> <ECA6BF> 51584
			<ECA780> <ECA7BF> 51648
			<ECA880> <ECA8BF> 51712
			<ECA980> <ECA9BF> 51776
			<ECAA80> <ECAABF> 51840
			<ECAB80> <ECABBF> 51904
			<ECAC80> <ECACBF> 51968
			<ECAD80> <ECADBF> 52032
			<ECAE80> <ECAEBF> 52096
			<ECAF80> <ECAFBF> 52160
			<ECB080> <ECB0BF> 52224
			<ECB180> <ECB1BF> 52288
			<ECB280> <ECB2BF> 52352
			<ECB380> <ECB3BF> 52416
			<ECB480> <ECB4BF> 52480
			<ECB580> <ECB5BF> 52544
			<ECB680> <ECB6BF> 52608
			<ECB780> <ECB7BF> 52672
			<ECB880> <ECB8BF> 52736
			<ECB980> <ECB9BF> 52800
			<ECBA80> <ECBABF> 52864
			<ECBB80> <ECBBBF> 52928
			<ECBC80> <ECBCBF> 52992
			<ECBD80> <ECBDBF> 53056
			<ECBE80> <ECBEBF> 53120
			<ECBF80> <ECBFBF> 53184
			<ED8080> <ED80BF> 53248
			<ED8180> <ED81BF> 53312
			<ED8280> <ED82BF> 53376
			<ED8380> <ED83BF> 53440
			<ED8480> <ED84BF> 53504
			<ED8580> <ED85BF> 53568
			<ED8680> <ED86BF> 53632
			<ED8780> <ED87BF> 53696
			<ED8880> <ED88BF> 53760
			<ED8980> <ED89BF> 53824
			<ED8A80> <ED8ABF> 53888
			<ED8B80> <ED8BBF> 53952
			<ED8C80> <ED8CBF> 54016
			<ED8D80> <ED8DBF> 54080
			<ED8E80> <ED8EBF> 54144
			<ED8F80> <ED8FBF> 54208
			<ED9080> <ED90BF> 54272
			<ED9180> <ED91BF> 54336
			<ED9280> <ED92BF> 54400
			<ED9380> <ED93BF> 54464
			<ED9480> <ED94BF> 54528
			<ED9580> <ED95BF> 54592
			<ED9680> <ED96BF> 54656
			<ED9780> <ED97BF> 54720
			<ED9880> <ED98BF> 54784
			<ED9980> <ED99BF> 54848
			<ED9A80> <ED9ABF> 54912
			<ED9B80> <ED9BBF> 54976
			<ED9C80> <ED9CBF> 55040
			<ED9D80> <ED9DBF> 55104
			<ED9E80> <ED9EBF> 55168
			<ED9F80> <ED9FBF> 55232
		endcidrange
		64 begincidrange
			<EDA080> <EDA0BF> 55296
			<EDA180> <EDA1BF> 55360
			<EDA280> <EDA2BF> 55424
			<EDA380> <EDA3BF> 55488
			<EDA480> <EDA4BF> 55552
			<EDA580> <EDA5BF> 55616
			<EDA680> <EDA6BF> 55680
			<EDA780> <EDA7BF> 55744
			<EDA880> <EDA8BF> 55808
			<EDA980> <EDA9BF> 55872
			<EDAA80> <EDAABF> 55936
			<EDAB80> <EDABBF> 56000
			<EDAC80> <EDACBF> 56064
			<EDAD80> <EDADBF> 56128
			<EDAE80> <EDAEBF> 56192
			<EDAF80> <EDAFBF> 56256
			<EDB080> <EDB0BF> 56320
			<EDB180> <EDB1BF> 56384
			<EDB280> <EDB2BF> 56448
			<EDB380> <EDB3BF> 56512
			<EDB480> <EDB4BF> 56576
			<EDB580> <EDB5BF> 56640
			<EDB680> <EDB6BF> 56704
			<EDB780> <EDB7BF> 56768
			<EDB880> <EDB8BF> 56832
			<EDB980> <EDB9BF> 56896
			<EDBA80> <EDBABF> 56960
			<EDBB80> <EDBBBF> 57024
			<EDBC80> <EDBCBF> 57088
			<EDBD80> <EDBDBF> 57152
			<EDBE80> <EDBEBF> 57216
			<EDBF80> <EDBFBF> 57280
			<EE8080> <EE80BF> 57344
			<EE8180> <EE81BF> 57408
			<EE8280> <EE82BF> 57472
			<EE8380> <EE83BF> 57536
			<EE8480> <EE84BF> 57600
			<EE8580> <EE85BF> 57664
			<EE8680> <EE86BF> 57728
			<EE8780> <EE87BF> 57792
			<EE8880> <EE88BF> 57856
			<EE8980> <EE89BF> 57920
			<EE8A80> <EE8ABF> 57984
			<EE8B80> <EE8BBF> 58048
			<EE8C80> <EE8CBF> 58112
			<EE8D80> <EE8DBF> 58176
			<EE8E80> <EE8EBF> 58240
			<EE8F80> <EE8FBF> 58304
			<EE9080> <EE90BF> 58368
			<EE9180> <EE91BF> 58432
			<EE9280> <EE92BF> 58496
			<EE9380> <EE93BF> 58560
			<EE9480> <EE94BF> 58624
			<EE9580> <EE95BF> 58688
			<EE9680> <EE96BF> 58752
			<EE9780> <EE97BF> 58816
			<EE9880> <EE98BF> 58880
			<EE9980> <EE99BF> 58944
			<EE9A80> <EE9ABF> 59008
			<EE9B80> <EE9BBF> 59072
			<EE9C80> <EE9CBF> 59136
			<EE9D80> <EE9DBF> 59200
			<EE9E80> <EE9EBF> 59264
			<EE9F80> <EE9FBF> 59328
		endcidrange
		64 begincidrange
			<EEA080> <EEA0BF> 59392
			<EEA180> <EEA1BF> 59456
			<EEA280> <EEA2BF> 59520
			<EEA380> <EEA3BF> 59584
			<EEA480> <EEA4BF> 59648
			<EEA580> <EEA5BF> 59712
			<EEA680> <EEA6BF> 59776
			<EEA780> <EEA7BF> 59840
			<EEA880> <EEA8BF> 59904
			<EEA980> <EEA9BF> 59968
			<EEAA80> <EEAABF> 60032
			<EEAB80> <EEABBF> 60096
			<EEAC80> <EEACBF> 60160
			<EEAD80> <EEADBF> 60224
			<EEAE80> <EEAEBF> 60288
			<EEAF80> <EEAFBF> 60352
			<EEB080> <EEB0BF> 60416
			<EEB180> <EEB1BF> 60480
			<EEB280> <EEB2BF> 60544
			<EEB380> <EEB3BF> 60608
			<EEB480> <EEB4BF> 60672
			<EEB580> <EEB5BF> 60736
			<EEB680> <EEB6BF> 60800
			<EEB780> <EEB7BF> 60864
			<EEB880> <EEB8BF> 60928
			<EEB980> <EEB9BF> 60992
			<EEBA80> <EEBABF> 61056
			<EEBB80> <EEBBBF> 61120
			<EEBC80> <EEBCBF> 61184
			<EEBD80> <EEBDBF> 61248
			<EEBE80> <EEBEBF> 61312
			<EEBF80> <EEBFBF> 61376
			<EF8080> <EF80BF> 61440
			<EF8180> <EF81BF> 61504
			<EF8280> <EF82BF> 61568
			<EF8380> <EF83BF> 61632
			<EF8480> <EF84BF> 61696
			<EF8580> <EF85BF> 61760
			<EF8680> <EF86BF> 61824
			<EF8780> <EF87BF> 61888
			<EF8880> <EF88BF> 61952
			<EF8980> <EF89BF> 62016
			<EF8A80> <EF8ABF> 62080
			<EF8B80> <EF8BBF> 62144
			<EF8C80> <EF8CBF> 62208
			<EF8D80> <EF8DBF> 62272
			<EF8E80> <EF8EBF> 62336
			<EF8F80> <EF8FBF> 62400
			<EF9080> <EF90BF> 62464
			<EF9180> <EF91BF> 62528
			<EF9280> <EF92BF> 62592
			<EF9380> <EF93BF> 62656
			<EF9480> <EF94BF> 62720
			<EF9580> <EF95BF> 62784
			<EF9680> <EF96BF> 62848
			<EF9780> <EF97BF> 62912
			<EF9880> <EF98BF> 62976
			<EF9980> <EF99BF> 63040
			<EF9A80> <EF9ABF> 63104
			<EF9B80> <EF9BBF> 63168
			<EF9C80> <EF9CBF> 63232
			<EF9D80> <EF9DBF> 63296
			<EF9E80> <EF9EBF> 63360
			<EF9F80> <EF9FBF> 63424
		endcidrange
		32 begincidrange
			<EFA080> <EFA0BF> 63488
			<EFA180> <EFA1BF> 63552
			<EFA280> <EFA2BF> 63616
			<EFA380> <EFA3BF> 63680
			<EFA480> <EFA4BF> 63744
			<EFA580> <EFA5BF> 63808
			<EFA680> <EFA6BF> 63872
			<EFA780> <EFA7BF> 63936
			<EFA880> <EFA8BF> 64000
			<EFA980> <EFA9BF> 64064
			<EFAA80> <EFAABF> 64128
			<EFAB80> <EFABBF> 64192
			<EFAC80> <EFACBF> 64256
			<EFAD80> <EFADBF> 64320
			<EFAE80> <EFAEBF> 64384
			<EFAF80> <EFAFBF> 64448
			<EFB080> <EFB0BF> 64512
			<EFB180> <EFB1BF> 64576
			<EFB280> <EFB2BF> 64640
			<EFB380> <EFB3BF> 64704
			<EFB480> <EFB4BF> 64768
			<EFB580> <EFB5BF> 64832
			<EFB680> <EFB6BF> 64896
			<EFB780> <EFB7BF> 64960
			<EFB880> <EFB8BF> 65024
			<EFB980> <EFB9BF> 65088
			<EFBA80> <EFBABF> 65152
			<EFBB80> <EFBBBF> 65216
			<EFBC80> <EFBCBF> 65280
			<EFBD80> <EFBDBF> 65344
			<EFBE80> <EFBEBF> 65408
			<EFBF80> <EFBFBF> 65472
		endcidrange
		1 beginnotdefrange
			<00> <1f> 0
		endnotdefrange
		endcmap
		currentdict CMapName exch /CMap defineresource pop
	end
end
%EOT
/cmapstr exch def

(%EOT) heredoc
% makes CIDMap from cgmap for GDBytes = 1
% cgmap is array of [CIDstart GID...] where GID is single or GIDstart -length range
% <CIDCount> <cgmap> cidmap1 <binary string of length CIDCount>
/cidmap1 {
	exch string exch
	{ % poke in gids at cid locations
		dup 0 get exch % cid
		dup length 1 sub 1 exch getinterval % gid ranges
		0 % last gid
		3 1 roll {
			dup 0 lt {
				2 index 1 add exch % start
				neg 1 sub 3 index add % end
			}{
				dup
			} ifelse
			4 -1 roll pop 3 1 roll % last gid
			1 3 index {
				3 index exch 2 index exch put
				1 add
			} for % each gid
		} forall % each gid run
		pop pop
	} forall % each cid range
} bind def
%EOT
/cidmap1procstr exch true crunchps def

(%EOT) heredoc
% makes CIDMap from cgmap for GDBytes = 2
% cgmap is array of [CIDstart GID...] where GID is single or GIDstart -length range
% <CIDCount> <cgmap> cidmap2 <array of 256 byte binary strings>
/cidmap2 {
	% make array of 256 byte strings
	exch
	2 mul % GDBytes
	dup 256 div ceiling cvi array
	0 1 2 index length 1 sub {
		dup
		8 bitshift 3 index exch sub dup 256 gt { pop 256 } if string
		2 index 3 1 roll put
	} for % each string
	exch pop exch
	% poke in gids at cid locations
	{
		dup 0 get 2 mul exch % cid x GDBytes
		dup length 1 sub 1 exch getinterval % gid ranges
		0 % last gid
		3 1 roll {
			dup 0 lt {
				2 index 1 add exch % start
				neg 1 sub 3 index add % end
			}{
				dup
			} ifelse
			4 -1 roll pop 3 1 roll % last gid
			1 3 index {
				3 index 2 index -8 bitshift get % substring
				2 index 16#FF and % offset
				2 index % gid
				dup 256 ge {
					3 copy -8 bitshift put % MSB
					16#FF and
				} if
				exch 1 add exch put % LSB
				pop
				2 add
			} for % each gid
		} forall % each gid run
		pop pop
	} forall % each cid range
} bind def
%EOT
/cidmap2procstr exch true crunchps def

% stringize cidmap
/cidmapstr {
	dup length array
	10 string % for cvs
	3 -1 roll
	0 1 2 index length 1 sub {
		2 copy get
		sfile
		dup ([) writestring
		()
		3 -1 roll {
			2 index 2 index writestring % space
			2 index exch 6 index cvs writestring
			pop ( )
		} forall
		pop
		dup (]) writestring
		closefile
		scopy
		4 index 3 1 roll put
	} for
	pop pop
} bind def

% stringize dictionary
/dictstr {
	2 index (<<\n) writestring
	dup [ exch { pop cvas } forall ] {} insertionsort % sorted names
	{
		2 copy get exch % value key
		4 index 4 index writestring % indent
		4 index (\t/) writestring
		4 index exch cvas writestring % key
		3 index ( ) writestring
		dup type { % case stmt
			dup /dicttype eq {
				pop
				3 index
				3 index (\t) concat2
				3 -1 roll dictstr
				2 index ( readonly) writestring
				exit
			} if
			dup /arraytype eq {
				pop
				() exch
				4 index ([) writestring
				{
					4 index 2 index writestring % spacing
					4 index exch cvas writestring
					pop ( )
				} forall
				pop
				2 index (] readonly) writestring
				exit
			} if
			dup /stringtype eq {
				pop
				3 index (\() writestring
				3 index exch writestring
				2 index (\)) writestring
				exit
			} if
			dup /nametype eq {
				pop
				3 index exch (/) exch concat2 writestring
				exit
			} if
			{
				pop
				3 index exch cvas writestring
				exit
			} exec
		} loop
		2 index (\n) writestring
	} forall
	pop
	2 copy writestring
	pop (>>) writestring
} bind def

% stringize CIDFont
/cidfontstr {
	sfile dup
	() 4 -1 roll dictstr
	closefile
	sdata
} bind def

% Type 2 CIDFont dictionary
/cidfont {
<<
	/FontInfo <<
		/FamilyName $names 1 get
		/Weight $names 2 get
		/FullName $names 4 get
		/Notice $names 0 get
		/version $names 5 get
		/isFixedPitch t_post /isFixedPitch get 0 ne
		/ItalicAngle t_post /italicAngle get
		/UnderlinePosition $underlineposition
		/UnderlineThickness $underlinethickness
		/extra << % other gleaned info
			/unitsPerEm t_head /unitsPerEm get % em units
			/isSymbolFont $symbolfont % true if all cids in Private Use Area E000-F8FF
			/style style % Windows/Mac style
			/lineSpacing linespacing % baseline to baseline distance
			/Tascent $tascent % used for cap height in some apps
		>>
	>>
	/CIDFontName $names 6 get cvn
	/CIDFontType 2 % TrueType glyph descriptions
	/CIDSystemInfo << /Registry (Adobe) /Ordering (Identity) /Supplement 0 >>
	/Encoding []
	/FontBBox [ t_head begin xMin yMin xMax yMax end ]
	/FontMatrix [1 0 0 1 0 0]
	/FontType 42 % gets replaced with 11
	/PaintType 0 % filled glyphs
	/CharStrings << /.notdef 0 >>
	/GDBytes $gdbytes
	/CIDCount $cmap length
	/CIDMap []
	/sfnts []
>>
} bind def

% emit sfnts string
/sfnt {
	dup length 0 ne {
		binary {
			compress {
				/$w sfile << /CloseTarget true >> /FlateEncode filter def
				$w 1 index writestring
				$w 0 write % Type42 padding byte
				$w closefile
				dup length slength sub dup 10 ge { slength exch }{ pop dup length 0 } ifelse
			}{
				dup length 0
			} ifelse
			dup 0 ne { % compressed
				exch
				cvas emit_str emit_sp cvas emit_str
				( RC ) emit_str
				sdata emit_str
				pop
			}{ % uncompressed
				pop
				cvas emit_str
				( RB ) emit_str
				emit_str
				0 emit_ord % Type42 padding byte
			} ifelse
		}{
			(<) emit_chr
			/$w $t42 /ASCIIHexEncode filter def
			$w exch writestring
			$w 0 write % Type42 padding byte
			$w closefile
		} ifelse
		emit_nl
		$t42 flushfile
	}{
		pop
	} ifelse
} bind def

/comment {
	(% ) emit_str
	emit_str
	emit_nl
} bind def

/glyfcomment {
	t_glyf 1 index get
	(%\t) emit_str
	% GID(s)
	(gid=) emit_str
	1 index cvas emit_str
	begin
		numberOfContours 0 lt {
			( [) emit_str
			()
			components {
				/glyphIndex get
				1 index emit_str
				cvas emit_str
				pop ( )
			} forall
			pop
			(]) emit_chr
		} if
	end
	% CID
	$gmap 1 index known {
		$gmap exch get
		emit_sp (cid=) emit_str
		dup cvas emit_str emit_sp
		dup dup 16#20 gt exch 16#7F lt and {
			(\() emit_chr
			dup dup dup 40 eq exch 41 eq or exch 92 eq or {
				(\\) emit_chr
			} if
			emit_ord
			(\)) emit_chr
		}{
			dup
			(\() emit_chr octal16 emit_str (\)) emit_chr
			emit_sp
			(<) emit_chr hex16 emit_str (>) emit_chr
		} ifelse
	}{
		pop
	} ifelse
	emit_nl
} bind def

/hmtxcomment {
	(%\t) emit_str
	dup d_hmtx /data get length 1 sub lt {
		(hMetrics) emit_str
		d_hmtx /data get length 2 gt {
			( \() emit_str
			cvas emit_str
			(\)) emit_chr
		}{
			pop
		} ifelse
	}{
		pop
		(leftSideBearing) emit_str
	} ifelse
	emit_nl
} bind def

/locacomment {
	d_loca /data get length 1 gt {
		(%\t) emit_str
		(loca \() emit_str
		cvas emit_str
		(\)) emit_chr
		emit_nl
	}{
		pop
	} ifelse
} bind def

% emit sfnts data
/sfnts {
	w_directory begin
		comments {
			(table directory) comment
		} if
		data sfnt
		$tables {
			(d_) exch concat2 load begin
				comments {
					tag ( table) concat2 comment
				} if
				data
				dup type /arraytype eq {
					0 1 2 index length 1 sub {
						2 copy get
						dup null ne {
							comments {
								tag (glyf) eq { 1 index glyfcomment } if
								tag (hmtx) eq { 1 index hmtxcomment } if
								tag (loca) eq { 1 index locacomment } if
							} if
							sfnt
						}{
							pop
						} ifelse
						pop
					} for
					pop
				}{
					sfnt
				} ifelse
			end
		} forall
	end
} bind def

/process {
	/ttf exch def

	% Type42 output file or dir

	/t42 where {
		pop t42 dup isdir
	}{
		ttf dirname true
	} ifelse
	psname not and ttfs length 1 gt or {
		[ exch dirname (/) ttf () basename (.) search { 3 1 roll pop pop } if (.t42) ] concata
	} if
	/t42 exch def

	% parse TTF font

	/$ttf ttf (r) file def % TTF input file

	/$r $ttf /ReusableStreamDecode filter def % reader

	r_directory

	findnames % get name strings
	findcmap % get CID map
	getmisc % get miscellaneous data

	info { information }{ convert } ifelse
} bind def

/convert {
	% process options

	subset length 0 ne { % make subset cmap
		subset ucs2 not { utf8toutf16be } if
		str2int16 $mincid symboloffset
		0 1 index { max } forall 1 add $cmap length min array
		exch {
			1 index exch
			$cmap length 1 index gt {
				$cmap 1 index get put
			}{
				pop pop
			} ifelse
		} forall
		/$cmap exch def
	} if

	optimise {
		$cmap remap
		/$cmap exch def
	} if

	/$gdbytes 0 $cmap { dup null ne { max }{ pop } ifelse } forall 16#100 ge { 2 }{ 1 } ifelse def

	comments {
		/$gmap $cmap gid2cid def
	} if

	% emit Type42 font

	psname {
		[ t42 dirname (/) $names 6 get (.t42) ] concata
		/t42 exch def
	} if

	/$t42 t42 (w) file def % Type42 output file

	(%!PS-TrueTypeFont) emit_str emit_nl
	emit_nl

	$gdbytes 2 eq { cidmap2procstr }{ cidmap1procstr } ifelse emit_str emit_nl
	emit_nl
	cmapstr emit_str emit_nl

	(/cidfont ) emit_str
	cidfont cidfontstr emit_str
	( def) emit_str emit_nl
	emit_nl

	(cidfont dup /CIDMap exch /CIDCount get [) emit_str emit_nl
	$cmap cidmap cidmapstr { emit_tab 80 fold emit_str emit_nl } forall
	(] cidmap) emit_str $gdbytes cvas emit_chr ( readonly put) emit_str emit_nl
	emit_nl

	binary {
		rb emit_str emit_nl
		compress { rc emit_str emit_nl } if
		emit_nl
	} if

	(cidfont /sfnts [) emit_str emit_nl
	sfnts
	(] readonly put) emit_str emit_nl
	emit_nl

	install emit_str emit_nl

	$t42 closefile
} bind def

/information {
	<<
		/filename ttf () basename
		/notice $names 0 get
		/family $names 1 get
		/subfamily $names 2 get
		/uniqueid $names 3 get
		/fullname $names 4 get
		/version $names 5 get
		/psname $names 6 get
		/trademark $names 7 get
		/style style
		/issymbolfont $symbolfont
	>> true dsort
	userdict /$out known not {
		systemdict /OutputFile known {
			userdict /$out systemdict /OutputFile get (w) file put
		}{
			userdict /$out $stdout put
		} ifelse
		() 1 index { % heading
			$out 2 index writestring
			aload pop pop cvas $out exch writestring
			pop (\t)
		} forall
		pop
		$out (\n) writestring
	} if
	() exch { % values
		$out 2 index writestring
		aload pop cvas $out exch writestring
		pop pop (\t)
	} forall
	pop
	$out (\n) writestring
} bind def

% CLI

10000000 setvmthreshold % lots of RAM

/emit_str { $t42 exch writestring } bind def
/emit_ord { $t42 exch write } bind def
/emit_chr { ord emit_ord } bind def
/emit_tab { 9 emit_ord } bind def
/emit_sp { 32 emit_ord } bind def
/emit_nl { 10 emit_ord } bind def

% TTF input file(s)

/ttf where {
	pop
	ttf isdir {
		/ttfs [
			[ (*.ttf) (*.TTF) (*.otf) (*.OTF) ] {
				ttf exch concat2 { dup length string copy } 1000 string filenameforall
			} forall
		] def
	}{
		ttf isfile {
			/ttfs [ ttf ] def
		}{
			(no TTF file: ) ttf concat2 error
		} ifelse
	} ifelse
}{
	(no TTF file: use -sttf=file.ttf or -sttf=dir/) error
} ifelse

% sort filenames

/ttfs <<
	ttfs {
		dup tolower exch
	} forall
>> true dsort def

% process

ttfs {
	1 get
	dup () basename notice
	{
		100 dict begin
			process
		end
	} stopped {
		clear
		cleardictstack
		$error /newerror get {
			$error /command get error
		} if
	} if
	1 vmreclaim % do local VM gc
	%vmstatus warning warning pop
} forall % each TTF

userdict /$out known {
	$out closefile
} if

% END Of FILE
